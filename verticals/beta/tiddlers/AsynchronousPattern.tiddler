<div tiddler="AsynchronousPattern" modifier="JeremyRuston" modified="200702141459" created="200702141459" tags="patterns" server.page.version="200702141459">Asynchronous methods are used by the low level HttpFunctions, and by higher level mechanisms such as the ServerAdaptorMechanism.\n\nThe standard TiddlyWiki approach is illustrated with this example of a {{{procrastinate()}}} function that takes a string parameter which is then returned after 1 second by a callback function:\n\n{{{\n// Call an asynchronous function\nfunction test()\n{\n	// The context object is for storing information that you're going to need inside the callback function\n	var myContext = {\n		param1: &quot;a string&quot;,\n		param2: {an: &quot;object&quot;},\n		param3: [&quot;an&quot;,&quot;array&quot;}\n	};\n	// Call the function including a reference to the callback function and it's context\n	procrastinate(&quot;hello tomorrow's world&quot;,myCallback,myContext);\n}\n\n// The callback function that gets invoked after 1 second\nfunction myCallback(status,context,procrastinatedString)\n{\n	displayMessage(&quot;Message from the past: &quot; + procrastinatedString);\n	displayMessage(&quot;Message context: &quot; + context.param1);\n}\n\n// The procrastinate function invokes a callback after 1 second with a specified string parameter\n//	procrastinatedString - the string to pass back to the callback function\n//	callback - the callback function\n//	context - a context object that is passed to the callback function\n// Returns true if the request was issued or a string error message if it failed\nfunction procrastinate(procrastinatedString,callback,context)\n{\n	window.setInterval(callback,1000,true,context,procrastinatedString);\n}\n\n}}}\n\nAsynchronous programming is necessary in several situations but is full of pitfalls for the unwary:\n* On many browsers, {{{alert()}}} doesn't work reliably in some asynchronous callbacks\n* It's very easy to miss errors by ignoring callback returns\n</div>
