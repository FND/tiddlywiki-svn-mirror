modifier: None
created: 
modified: 20100111154157
type: None
tags: systemConfig

/***
|Name|TableViewPlugin|
|Version|0.1|
|Author|Ben Gillies|                                     a
|Type|plugin|
|Description|view tiddlers in a table suitable for copying into excel|
!Usage
Creates a table view where each row is a configurable list of tiddlers transposed into a single tiddler.

call with:

&lt;&lt;table filter:[filter[here]] heading:heading_name heading:heading_name heading:heading_name>>

filter:[filter[here]] is the filter you want to use to select tiddlers eg - [tag[company]] would use all tiddlers tagged company

heading:heading_name is a table heading. Note this must be the same as the tiddler name being used in that column.

eg:

&lt;&lt;table filter:[tag[company]] heading:title heading:description heading:status>>

Would create a table with all tiddlers tagged company. The first column is the tiddler title.
The second column comes from a separate tiddler of the form TiddlerName_description.
The third column comes from a separate tiddler of the form TiddlerName_status.

Whether separate tiddlers are pulled in or not is dependent upon whether a filed of that name exists.

ie - if a "description" field existed, that would be used instead.

Other options instead of heading, are:

&lt;&lt;table filter:[filter[here]] columnTiddler:tiddler_name heading:matchPattern>>

In this case, columnTiddler specifies the name of a tiddler that contains all columns

heading:matchPattern then specifies a name to strip from the end of each line, leaving just the column titles.

For example:

&lt;&lt;table filter:[tag[company]] columnTiddler:CompanyStructure heading:Section>>

would take each line from CompanyStructure, strip the word "Section" from the end, and use that as the column headings.

In this case, title is always used as the default first column.

!Code
***/
//{{{
    if(!version.extensions.TableViewPlugin)
    { //# ensure that the plugin is only installed once
        version.extensions.TableViewPlugin = { installed: true }
    };
    
    config.macros.table ={
        handler: function(place, macroName, params, wikifier, paramString, tiddler){ 
            
            //parse the params into tableHeadings and excludeBags
            params = paramString.parseParams()[0];
            
            var tiddlers = store.filterTiddlers(params['filter']);
            var headings = params['heading'];
            var columnTiddler = false;
            if ('columnTiddler' in params) {
                columnTiddler = store.getTiddler(params['columnTiddler']);
                var pattern = new RegExp(headings + '$');
                headings = columnTiddler.text.split('\n');
                for (var i=0; i<headings.length; i++) {
                    headings[i] = headings[i].split(pattern)[0];
                }
            }
            
            //construct the table heading
            var defaultTitleColumn = columnTiddler ? '<th>title</th>' : '';
            var tableHead = '<thead><tr>' + defaultTitleColumn;
            for (var i=0; i<headings.length; i++) {
                tableHead += '<th>' + headings[i] + '</th>';
            }
            tableHead += '</tr></thead>';
            
            //construct the table body
            var tableBody = '<tbody>';
            for (var i=0; i < tiddlers.length; i++) {
                var tiddler = tiddlers[i];
                
                var defaultTitleText = columnTiddler ? '<td>' + tiddler.title + '</td>' : '';
                var tableRow = '<tr>' + defaultTitleText;
                for (var j=0; j<headings.length; j++) {
                    var heading = headings[j];
                    var tableValue = '';
                    var fetchValue = function() {
                        var subTiddlerName = tiddler.title + '_' + heading;
                        var cellTiddler = store.getTiddler(subTiddlerName);
                        if (cellTiddler) {               
                            var tmpPlace = document.createElement("div")
                            wikify(cellTiddler.text, tmpPlace);  
                            return tmpPlace.innerHTML;
                        } else {
                           return '';
                        }
                    }
                    if (heading === 'title') {
                        tableValue = '<div class="reportTableLink'+tiddler[heading].split(' ').join('')+'"></div>';
                    } else {
                        tableValue = (heading in tiddler) ? tiddler[heading] : tiddler.fields[heading] || fetchValue();
                    }
                    tableRow += '<td>' + tableValue + '</td>';
                }
                tableRow += '</tr>';
                tableBody += tableRow;
            }
            tableBody += '</tbody>';
            
            var table = '<div class="reportContainer"><table class="reportTable">' + tableHead + tableBody + '</table></div>';
            
            jQuery(place).append(table);
            for (var i=0; i < tiddlers.length; i++) {
                var classtitle = 'reportTableLink'+tiddlers[i].title.split(' ').join('');
                var placeLink = jQuery('.'+classtitle)[0]; console.log(placeLink);
                createTiddlyLink(placeLink, tiddlers[i].title, true);
            }
        }
    }
//}}}
