jQuery(document).ready(function(){

	module("TiddlyWiki core");

	test("Date functions", function() {

		var actual = new Date(2008,11,31,9,48).formatString("0hh12");
		var expected = "09";
		ok(actual==expected,'12-hour format (with zero-padding) should return correct result for AM times');
		actual = new Date(2008,11,31,21,48).formatString("0hh12");
		expected = "09";
		ok(actual==expected,'12-hour format (with zero-padding) should return correct result for PM times');
		actual = new Date(2008,11,31,9,48).formatString("hh12");
		expected = "9";
		ok(actual==expected,'12-hour format (without zero-padding) should return correct result for AM times');
		actual = new Date(2008,11,31,21,48).formatString("hh12");
		expected = "9";
		ok(actual==expected,'12-hour format (without zero-padding) should return correct result for PM times');

		actual = new Date(2008,11,31,9,48).formatString("0hh");
		expected = "09";
		ok(actual==expected,'24-hour format (with zero-padding) should return correct result for AM times');
		actual = new Date(2008,11,31,21,48).formatString("0hh");
		expected = "21";
		ok(actual==expected,'24-hour format (with zero-padding) should return correct result for PM times');
		actual = new Date(2008,11,31,9,48).formatString("hh");
		expected = "9";
		ok(actual==expected,'24-hour format (without zero-padding) should return correct result for AM times');
		actual = new Date(2008,11,31,21,48).formatString("hh");
		expected = "21";
		ok(actual==expected,'24-hour format (without zero-padding) should return correct result for PM times');

		actual = new Date(2008,0).formatString("mmm");
		expected = "Jan";
		ok(actual==expected,'short-month format should return "Jan" for month 0');
		actual = new Date(2008,1).formatString("mmm");
		expected = "Feb";
		ok(actual==expected,'short-month format should return "Feb" for month 1');
		actual = new Date(2008,2).formatString("mmm");
		expected = "Mar";
		ok(actual==expected,'short-month format should return "Mar" for month 2');
		actual = new Date(2008,3).formatString("mmm");
		expected = "Apr";
		ok(actual==expected,'short-month format should return "Apr" for month 3');
		actual = new Date(2008,4).formatString("mmm");
		expected = "May";
		ok(actual==expected,'short-month format should return "May" for month 4');
		actual = new Date(2008,5).formatString("mmm");
		expected = "Jun";
		ok(actual==expected,'short-month format should return "Jun" for month 5');
		actual = new Date(2008,6).formatString("mmm");
		expected = "Jul";
		ok(actual==expected,'short-month format should return "Jul" for month 6');
		actual = new Date(2008,7).formatString("mmm");
		expected = "Aug";
		ok(actual==expected,'short-month format should return "Aug" for month 7');
		actual = new Date(2008,8).formatString("mmm");
		expected = "Sep";
		ok(actual==expected,'short-month format should return "Sep" for month 8');
		actual = new Date(2008,9).formatString("mmm");
		expected = "Oct";
		ok(actual==expected,'short-month format should return "Oct" for month 9');
		actual = new Date(2008,10).formatString("mmm");
		expected = "Nov";
		ok(actual==expected,'short-month format should return "Nov" for month 10');
		actual = new Date(2008,11).formatString("mmm");
		expected = "Dec";
		ok(actual==expected,'short-month format should return "Dec" for month 12');

		actual = new Date(2008,11,15,11,0).formatString("0mm");
		expected = "00";
		ok(actual==expected,'minutes format (with zero-padding) should return "00" for minute 0');
		actual = new Date(2008,11,15,11,5).formatString("0mm");
		expected = "05";
		ok(actual==expected,'minutes format (with zero-padding) should return "05" for minute 5');
		actual = new Date(2008,11,15,11,30).formatString("0mm");
		expected = "30";
		ok(actual==expected,'minutes format (with zero-padding) should return "30" for minute 30');
		actual = new Date(2008,11,15,11,60).formatString("0mm");
		expected = "00";
		ok(actual==expected,'minutes format (with zero-padding) should return "00" for minute 60');
		actual = new Date(2008,11,15,11,0).formatString("mm");
		expected = "0";
		ok(actual==expected,'minutes format (without zero-padding) should return "0" for minute 0');
		actual = new Date(2008,11,15,11,5).formatString("mm");
		expected = "5";
		ok(actual==expected,'minutes format (without zero-padding) should return "5" for minute 5');
		actual = new Date(2008,11,15,11,30).formatString("mm");
		expected = "30";
		ok(actual==expected,'minutes format (without zero-padding) should return "30" for minute 30');
		actual = new Date(2008,11,15,11,60).formatString("mm");
		expected = "0";
		ok(actual==expected,'minutes format (without zero-padding) should return "0" for minute 60');

		actual = new Date(2008,11,15,11,1,0).formatString("0ss");
		expected = "00";
		ok(actual==expected,'seconds format (with zero-padding) should return "00" for second 0');
		actual = new Date(2008,11,15,11,1,5).formatString("0ss");
		expected = "05";
		ok(actual==expected,'seconds format (with zero-padding) should return "05" for second 5');
		actual = new Date(2008,11,15,11,1,30).formatString("0ss");
		expected = "30";
		ok(actual==expected,'seconds format (with zero-padding) should return "30" for second 30');
		actual = new Date(2008,11,15,11,1,60).formatString("0ss");
		expected = "00";
		ok(actual==expected,'seconds format (with zero-padding) should return "00" for second 60');
		actual = new Date(2008,11,15,11,1,0).formatString("ss");
		expected = "0";
		ok(actual==expected,'seconds format (without zero-padding) should return "0" for second 0');
		actual = new Date(2008,11,15,11,1,5).formatString("ss");
		expected = "5";
		ok(actual==expected,'seconds format (without zero-padding) should return "5" for second 5');
		actual = new Date(2008,11,15,11,1,30).formatString("ss");
		expected = "30";
		ok(actual==expected,'seconds format (without zero-padding) should return "30" for second 30');
		actual = new Date(2008,11,15,11,1,60).formatString("ss");
		expected = "0";
		ok(actual==expected,'seconds format (without zero-padding) should return "0" for second 60');

		actual = new Date(2008,11,15,0).formatString("am");
		expected = "am";
		ok(actual==expected,'am format should return "am" for pre-noon times (00:00:00)');
		actual = new Date(2008,11,15,8).formatString("am");
		expected = "am";
		ok(actual==expected,'am format should return "am" for pre-noon times (08:00:00)');
		actual = new Date(2008,11,15,11,59,59).formatString("am");
		expected = "am";
		ok(actual==expected,'am format should return "am" for pre-noon times (11:59:59)');
		actual = new Date(2008,11,15,0).formatString("pm");
		expected = "am";
		ok(actual==expected,'pm format should return "am" for pre-noon times (00:00:00)');
		actual = new Date(2008,11,15,8).formatString("pm");
		expected = "am";
		ok(actual==expected,'pm format should return "am" for pre-noon times (08:00:00)');
		actual = new Date(2008,11,15,11,59,59).formatString("pm");
		expected = "am";
		ok(actual==expected,'pm format should return "am" for pre-noon times (11:59:59)');
		actual = new Date(2008,11,15,12).formatString("am");
		expected = "pm";
		ok(actual==expected,'am format should return "pm" for pre-midnight times (12:00:00)');
		actual = new Date(2008,11,15,20).formatString("am");
		expected = "pm";
		ok(actual==expected,'am format should return "pm" for pre-midnight times (20:00:00)');
		actual = new Date(2008,11,15,23,59,59).formatString("am");
		expected = "pm";
		ok(actual==expected,'am format should return "pm" for pre-midnight times (23:59:59)');
		actual = new Date(2008,11,15,12).formatString("pm");
		expected = "pm";
		ok(actual==expected,'pm format should return "pm" for pre-midnight times (12:00:00)');
		actual = new Date(2008,11,15,20).formatString("pm");
		expected = "pm";
		ok(actual==expected,'pm format should return "pm" for pre-midnight times (20:00:00)');
		actual = new Date(2008,11,15,23,59,59).formatString("pm");
		expected = "pm";
		ok(actual==expected,'pm format should return "pm" for pre-midnight times (23:59:59)');

		actual = new Date(2008,11,15,0).formatString("AM");
		expected = "AM";
		ok(actual==expected,'AM format should return "AM" for pre-noon times (00:00:00)');
		actual = new Date(2008,11,15,8).formatString("AM");
		expected = "AM";
		ok(actual==expected,'AM format should return "AM" for pre-noon times (08:00:00)');
		actual = new Date(2008,11,15,11,59,59).formatString("AM");
		expected = "AM";
		ok(actual==expected,'AM format should return "AM" for pre-noon times (11:59:59)');
		actual = new Date(2008,11,15,0).formatString("PM");
		expected = "AM";
		ok(actual==expected,'PM format should return "AM" for pre-noon times (00:00:00)');
		actual = new Date(2008,11,15,8).formatString("PM");
		expected = "AM";
		ok(actual==expected,'PM format should return "AM" for pre-noon times (08:00:00)');
		actual = new Date(2008,11,15,11,59,59).formatString("PM");
		expected = "AM";
		ok(actual==expected,'PM format should return "AM" for pre-noon times (11:59:59)');
		actual = new Date(2008,11,15,12).formatString("AM");
		expected = "PM";
		ok(actual==expected,'AM format should return "PM" for pre-midnight times (12:00:00)');
		actual = new Date(2008,11,15,20).formatString("AM");
		expected = "PM";
		ok(actual==expected,'AM format should return "PM" for pre-midnight times (20:00:00)');
		actual = new Date(2008,11,15,23,59,59).formatString("AM");
		expected = "PM";
		ok(actual==expected,'AM format should return "PM" for pre-midnight times (23:59:59)');
		actual = new Date(2008,11,15,12).formatString("PM");
		expected = "PM";
		ok(actual==expected,'PM format should return "PM" for pre-midnight times (12:00:00)');
		actual = new Date(2008,11,15,20).formatString("PM");
		expected = "PM";
		ok(actual==expected,'PM format should return "PM" for pre-midnight times (20:00:00)');
		actual = new Date(2008,11,15,23,59,59).formatString("PM");
		expected = "PM";
		ok(actual==expected,'PM format should return "PM" for pre-midnight times (23:59:59)');

		actual = new Date(2007,11,31).formatString("wYYYY");
		expected = "2008";
		ok(actual==expected,'week-based four-digit year format should return the year based on the week number');
		actual = new Date(2007,11,31).formatString("wYY");
		expected = "08";
		ok(actual==expected,'week-based two-digit year format should return the year based on the week number');
		actual = new Date(2007,11,31).formatString("YYYY");
		expected = "2007";
		ok(actual==expected,'four-digit year format should return the correct year');
		actual = new Date(7,11,31).formatString("YYYY");
		expected = "1907";
		ok(actual==expected,'four-digit year format should return the correct year based on 20th century');
		actual = new Date(2007,11,31).formatString("YY");
		expected = "07";
		ok(actual==expected,'two-digit year format should return the correct year');

		actual = new Date(2008,0).formatString("MMM");
		expected = "January";
		ok(actual==expected,'full-month format should return "January" for month 0');
		actual = new Date(2008,1).formatString("MMM");
		expected = "February";
		ok(actual==expected,'full-month format should return "February" for month 1');
		actual = new Date(2008,2).formatString("MMM");
		expected = "March";
		ok(actual==expected,'full-month format should return "March" for month 2');
		actual = new Date(2008,3).formatString("MMM");
		expected = "April";
		ok(actual==expected,'full-month format should return "April" for month 3');
		actual = new Date(2008,4).formatString("MMM");
		expected = "May";
		ok(actual==expected,'full-month format should return "May" for month 4');
		actual = new Date(2008,5).formatString("MMM");
		expected = "June";
		ok(actual==expected,'full-month format should return "June" for month 5');
		actual = new Date(2008,6).formatString("MMM");
		expected = "July";
		ok(actual==expected,'full-month format should return "July" for month 6');
		actual = new Date(2008,7).formatString("MMM");
		expected = "August";
		ok(actual==expected,'full-month format should return "August" for month 7');
		actual = new Date(2008,8).formatString("MMM");
		expected = "September";
		ok(actual==expected,'full-month format should return "September" for month 8');
		actual = new Date(2008,9).formatString("MMM");
		expected = "October";
		ok(actual==expected,'full-month format should return "October" for month 9');
		actual = new Date(2008,10).formatString("MMM");
		expected = "November";
		ok(actual==expected,'full-month format should return "November" for month 10');
		actual = new Date(2008,11).formatString("MMM");
		expected = "December";
		ok(actual==expected,'full-month format should return "December" for month 12');

		actual = new Date(2008,0).formatString("0MM");
		expected = "01";
		ok(actual==expected,'months format (with zero-padding) should return "01" for January');
		actual = new Date(2008,11).formatString("0MM");
		expected = "12";
		ok(actual==expected,'months format (with zero-padding) should return "12" for December');
		actual = new Date(2008,12).formatString("0MM");
		expected = "01";
		ok(actual==expected,'months format (with zero-padding) should return "01" for month 13');
		actual = new Date(2008,0).formatString("MM");
		expected = "1";
		ok(actual==expected,'months format (without zero-padding) should return "1" for January');
		actual = new Date(2008,11).formatString("MM");
		expected = "12";
		ok(actual==expected,'months format (without zero-padding) should return "12" for December');
		actual = new Date(2008,12).formatString("MM");
		expected = "1";
		ok(actual==expected,'months format (without zero-padding) should return "1" for month 13');

		actual = new Date(2008,0,3).formatString("0WW");
		expected = "01";
		ok(actual==expected,'weeks format (with zero-padding) should return "01" for the first Thursday of the year');
		actual = new Date(2008,11,28).formatString("0WW");
		expected = "52";
		ok(actual==expected,'weeks format (with zero-padding) should return "52" for the last Sunday of the year');
		actual = new Date(2008,0,1).formatString("WW");
		expected = "1";
		ok(actual==expected,'weeks format (without zero-padding) should return "1" for the first day of the year');
		actual = new Date(2008,11,28).formatString("WW");
		expected = "52";
		ok(actual==expected,'weeks format (without zero-padding) should return "52" for the last Sunday of the year');

		actual = new Date(2008,0,7).formatString("DDD");
		expected = "Monday";
		ok(actual==expected,'full-day format should return "Monday" for the first day of the week');
		actual = new Date(2008,0,8).formatString("DDD");
		expected = "Tuesday";
		ok(actual==expected,'full-day format should return "Tuesday" for the second day of the week');
		actual = new Date(2008,0,9).formatString("DDD");
		expected = "Wednesday";
		ok(actual==expected,'full-day format should return "Wednesday" for the third day of the week');
		actual = new Date(2008,0,10).formatString("DDD");
		expected = "Thursday";
		ok(actual==expected,'full-day format should return "Thursday" for the fourth day of the week');
		actual = new Date(2008,0,11).formatString("DDD");
		expected = "Friday";
		ok(actual==expected,'full-day format should return "Friday" for the fifth day of the week');
		actual = new Date(2008,0,12).formatString("DDD");
		expected = "Saturday";
		ok(actual==expected,'full-day format should return "Saturday" for the sixth day of the week');
		actual = new Date(2008,0,13).formatString("DDD");
		expected = "Sunday";
		ok(actual==expected,'full-day format should return "Sunday" for the seventh day of the week');

		actual = new Date(2008,0,7).formatString("ddd");
		expected = "Mon";
		ok(actual==expected,'short-day format should return "Mon" for the first day of the week');
		actual = new Date(2008,0,8).formatString("ddd");
		expected = "Tue";
		ok(actual==expected,'short-day format should return "Tue" for the second day of the week');
		actual = new Date(2008,0,9).formatString("ddd");
		expected = "Wed";
		ok(actual==expected,'short-day format should return "Wed" for the third day of the week');
		actual = new Date(2008,0,10).formatString("ddd");
		expected = "Thu";
		ok(actual==expected,'short-day format should return "Thu" for the fourth day of the week');
		actual = new Date(2008,0,11).formatString("ddd");
		expected = "Fri";
		ok(actual==expected,'short-day format should return "Fri" for the fifth day of the week');
		actual = new Date(2008,0,12).formatString("ddd");
		expected = "Sat";
		ok(actual==expected,'short-day format should return "Sat" for the sixth day of the week');
		actual = new Date(2008,0,13).formatString("ddd");
		expected = "Sun";
		ok(actual==expected,'short-day format should return "Sun" for the seventh day of the week');

		actual = new Date(2008,5,1).formatString("0DD");
		expected = "01";
		ok(actual==expected,'days format (with zero-padding) should return "01" for the first day of the month');
		actual = new Date(2008,0,31).formatString("0DD");
		expected = "31";
		ok(actual==expected,'days format (with zero-padding) should return "31" for January 31');
		actual = new Date(2008,0,32).formatString("0DD");
		expected = "01";
		ok(actual==expected,'days format (with zero-padding) should return "01" for January 32 [sic]');
		actual = new Date(2008,1,29).formatString("0DD");
		expected = "29";
		ok(actual==expected,'days format (with zero-padding) should return "29" for February 29, 2008');
		actual = new Date(2009,1,29).formatString("0DD");
		expected = "01";
		ok(actual==expected,'days format (with zero-padding) should return "01" for February 29 [sic], 2009');

		actual = new Date(2008,5,1).formatString("DD");
		expected = "1";
		ok(actual==expected,'days format (without zero-padding) should return "1" for the first day of the month');
		actual = new Date(2008,0,31).formatString("DD");
		expected = "31";
		ok(actual==expected,'days format (without zero-padding) should return "31" for January 31');
		actual = new Date(2008,0,32).formatString("DD");
		expected = "1";
		ok(actual==expected,'days format (without zero-padding) should return "1" for January 32 [sic]');
		actual = new Date(2008,1,29).formatString("DD");
		expected = "29";
		ok(actual==expected,'days format (without zero-padding) should return "29" for February 29, 2008');
		actual = new Date(2009,1,29).formatString("DD");
		expected = "1";
		ok(actual==expected,'days format (without zero-padding) should return "1" for February 29 [sic], 2009');

		actual = new Date(2008,5,1).formatString("DDth");
		expected = "1st";
		ok(actual==expected,'day-with-suffix format should return "1st" for the first day of the month');
		actual = new Date(2008,5,2).formatString("DDth");
		expected = "2nd";
		ok(actual==expected,'day-with-suffix format should return "2nd" for the second day of the month');
		actual = new Date(2008,5,3).formatString("DDth");
		expected = "3rd";
		ok(actual==expected,'day-with-suffix format should return "3rd" for the third day of the month');
		actual = new Date(2008,5,4).formatString("DDth");
		expected = "4th";
		ok(actual==expected,'day-with-suffix format should return "4th" for the fourth day of the month');
		actual = new Date(2008,5,11).formatString("DDth");
		expected = "11th";
		ok(actual==expected,'day-with-suffix format should return "11th" for the eleventh day of the month');
		actual = new Date(2008,5,21).formatString("DDth");
		expected = "21st";
		ok(actual==expected,'day-with-suffix format should return "21st" for the twenty-first day of the month');
		actual = new Date(2008,5,22).formatString("DDth");
		expected = "22nd";
		ok(actual==expected,'day-with-suffix format should return "22nd" for the twenty-second day of the month');
		actual = new Date(2008,5,23).formatString("DDth");
		expected = "23rd";
		ok(actual==expected,'day-with-suffix format should return "23rd" for the twenty-third day of the month');
		actual = new Date(2008,5,24).formatString("DDth");
		expected = "24th";
		ok(actual==expected,'day-with-suffix format should return "24th" for the twenty-fourth day of the month');
		actual = new Date(2008,0,32).formatString("DDth");
		expected = "1st";
		ok(actual==expected,'day-with-suffix format should return "1st" for the January 32 [sic]');
	});


	test("Date: formatting", function() {
		var actual = new Date(2007,2,1).formatString("YYYY MMM DD");
		var expected = "2007 March 1";
		ok(actual==expected,'Date formatting YYYY MMM DD');
		actual = new Date(2007,2,1).formatString("DD of MMM, YYYY");
		expected = "1 of March, 2007";
		ok(actual==expected,'Given a format string including text (such as DD of MMM, YYYY) the date format outputs accordingly.');
		actual = new Date(2008,11,31,23,48,59).formatString("YYYY MMM DD hh:mm ss");
		expected = "2008 December 31 23:48 59";
		ok(actual==expected,'Date formatting YYYY MMM DD hh:mm ss');
		actual = new Date(2008,11,31,3,8,9).formatString("0hh hh 0mm mm 0ss ss");
		expected = "03 3 08 8 09 9";
		ok(actual==expected,'Date formatting hours, minutes & seconds');
		actual = new Date(2008,11,31,3,8,9).formatString("hh12 0hh12 AM am PM pm");
		expected = "3 03 AM am AM am";
		ok(actual==expected,'Date formatting 12-hour (AM)');
		actual = new Date(2008,11,31,15,8,9).formatString("hh12 0hh12 AM am PM pm");
		expected = "3 03 PM pm PM pm";
		ok(actual==expected,'Date formatting 12-hour (PM)');
		actual = Date.convertFromYYYYMMDDHHMM("200812312348").toString();
		expected = new Date(2008,11,31,23,48,0,0).toString();
		ok(actual==expected,'Date convertFromYYYYMMDDHHMM');
	});


	test("Date: information", function() {
		var actual = new Date(2007,2,1,10,0).getAmPm();
		var expected = "am";
		ok(actual==expected,'Given an AM time, getAmPm returns am');
		actual = new Date(2007,2,1,13,0).getAmPm();
		expected = "pm";
		ok(actual==expected,'Given an PM time, getAmPm returns pm');
		actual = new Date(2007,2,1).daySuffix();
		expected = "st";
		ok(actual==expected,'Give a valid date (1st), daySuffix returns the correct day Suffix ');
	});


	test("Date: escaping", function() {
		var actual = new Date(2008,0,31,1,2,3).formatString("Y\\Y\\Y\\Y");
		var expected = "YYYY";
		ok(actual==expected,'should not convert escaped four-digit year format');
		actual = new Date(2008,0,31,1,2,3).formatString("Y\\Y");
		expected = "YY";
		ok(actual==expected,'should not convert escaped two-digit year format');
	});
});

