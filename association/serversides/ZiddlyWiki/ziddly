## Script (Python) "ziddly"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=root=None, skin=None, get_release=0, js=[], css=[]
##title=
##
# Grab the TiddlyWiki source, insert some stuff,
# and return the modified source to the client

ziddly_point_release = 1

if get_release:
  return ziddly_point_release

if root: context = root
path = '/'.join(context.getPhysicalPath())

format = context.REQUEST.get('format', None)
if format:
  return container[format](root=root, zw=container)

action = context.REQUEST.get('action', None)
if action:
  return container.actions[action](root=root)

# Perform auto-upgrade actions if necessary
if not hasattr(context, 'tiddlers') or not context.REQUEST.AUTHENTICATED_USER.has_permission('View History', context.tiddlers):
    try:
        if not hasattr(context, 'tiddlers'):
            context.manage_addFolder(id='tiddlers')
        context.tiddlers.manage_permission('View History', ['Anonymous'], acquire=0)
        for tiddlerid in context.tiddlers.objectIds('DTML Document'):
            tiddler = context.tiddlers[tiddlerid]
            # This upgrade is DANGEROUS and should be performed only once.
            # We have no reliable way to determine automatically if it should
            # be performed.  The user will have to do it himself by hand.
            if context.REQUEST.get('upgrade2.0.11', None):
                body = tiddler(context, context.REQUEST).replace('&gt;', '>').replace('&lt;', '<')
                tiddler.manage_edit(data=body, title=tiddler.title_or_id())
            tags = getattr(tiddler, 'tags', '').split(' ')
            if 'private' in tags: # FIXME private logic will fail if someone has a tag [[foo private bar]]
                tiddler.manage_permission('View', ['Authenticated', 'Manager', 'Owner'], acquire=0)
        # This tracks versions of the 'tiddlers' folder.  If an upgrade
        # requires mass conversion, we can tell what the old version was by
        # looking at this.
        context.tiddlers.manage_addProperty('storeversion', 0, 'integer')           
        # Future stores will:
        # 1) use File objects instead of DTML Documents
        # 2) store tiddlers as div's.
    except: 
        context.REQUEST.RESPONSE.setStatus(401)
        return "You have just upgraded ZiddlyWiki and some changes need to be made that require Manager access.  Please reload this page and log in as a Manager to perform the upgrade.";

# disable caching
context.REQUEST.RESPONSE.appendHeader('Cache-Control', 'no-cache')

# XHTML
#context.REQUEST.RESPONSE.setHeader('Content-Type', 'application/xhtml+xml;charset=utf-8')
context.REQUEST.RESPONSE.setHeader('Content-Type', 'text/html;charset=utf-8')

# get the TiddlyWiki source
src = container.html['empty.html']()

# change the title
try: title = root.tiddlers.SiteTitle(context, context.REQUEST).replace('<', '&lt;').replace('>', '&gt;').replace('[[', '').replace(']]', '')
except: title = context.title_or_id()
# empty.html does not have a title, so create a new one
src = src.replace('<!--PRE-HEAD-END-->', '<!--PRE-HEAD-END-->\n<title>%s</title>' % (title))

# insert the extra stuff
markup_titles = ['MarkupPreHead', 'MarkupPostHead', 'MarkupPreBody', 'MarkupPostBody']
markups = {}
for markup in markup_titles:
    markups[markup] = ''
    try: 
        markup_tiddler = container.tiddlers[markup]
        if 'deleted' in getattr(markup_tiddler, 'tags', '').split():
            raise KeyError
    except KeyError:
        try: 
            markup_tiddler = root.tiddlers[markup]
            if 'deleted' in getattr(markup_tiddler, 'tags', '').split():
                raise KeyError
        except KeyError:
            continue
    markups[markup] = markup_tiddler()

src = src.replace('<!--PRE-HEAD-END-->',  markups['MarkupPreHead']  + '<!--PRE-HEAD-END-->' )
src = src.replace('<!--POST-HEAD-END-->', markups['MarkupPostHead'] + '<!--POST-HEAD-END-->')
src = src.replace('<!--PRE-BODY-END-->',  markups['MarkupPreBody']  + '<!--PRE-BODY-END-->' )
src = src.replace('<!--POST-BODY-END-->', markups['MarkupPostBody'] + '<!--POST-BODY-END-->')

# insert all the tiddlers from the "tiddlers" folder
# root takes precedence over distribution tiddlers
# You may add other locations here.  e.g. root.aq_parent.plugins if you have
# created a ZW instance called 'plugins' in the same directory as your main ZW.
store_area = container.actions.get_all_as_divs([root, container])
src = src.replace('<div id="storeArea">', '<div id="storeArea">\n' + store_area)

# give the client the modified TiddlyWiki source
return src
