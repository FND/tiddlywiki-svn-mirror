Some ideas for ways to improve ZiddlyWiki.  If you want one of the below
featuers, feel free to work on it and send a patch th
TiddlyWikiDev@googlegroups.com!  See:
    http://www.ziddlywiki.org/#ZiddlyContributions
for instructions on how to make a patch file.

* Display a message if a newer revision is available on "view"

* Check if someone is editing a tiddler when it is being displayed.  Grey out
    edit button or something, or change it to 'editing: Joe'...

* An empty edit generates a lock, and forces all users to reload the tiddler.

* Make these locks compatible with WEBDAV locks:

    It seems WebDAV locks can't obtain the identity of the person holding
    the lock.

    Again, could use lock_user as an object attribute, but that incurs a
    history change and revisionKey change.

* Make an external editor link on the toolbar if it's configured (use DTML to
    modify the default ViewTemplate)

* The core uses store.dirty to indicate that the wiki needs to be saved.  This
  functionality is essentially disabled right now.  Instead we need a
  "saveFailed" flag which indicates that the current store has changes that
  were not uploaded.  First we should try to re-upload those changes (in case
  the network went down), and we should issue the "Unsaved Changes" dialog if
  the user tries to leave the page.

* 2.1's Import Tiddlers also calls addTiddler, which doesn't trigger ZW's save
  machinery.

* Put CSS in ziddly in a separate file, or a tiddler.  StyleSheetZiddlyWiki?

* Put core js into js, rename javascripts -> js, and include them rather than
  assembling big file.  (Note this means saveChanges must be rewritten)

* xml is completely broken.  Rename to index.xml so default tiddly link for xml
  works.

* ziddly shouldn't do any slicing of empty.html.  Instead reproduce the
  functionality of cook, and give ziddlywiki an empty.html.recipe.

* Modify installer and download to get the new files (e.g. html/status.html)

* Get rid of all the shadow tiddlers in ziddly.js.  Instead make a tiddlers/
  directory and stitch them into the file, letting the user's tiddlers/
  directory take precedence.

* Remove ImportTiddlyWiki in favor of 2.1's ImportTiddlers

* Editing a shadow tiddler when a deleted version exists on the server will
  edit the deleted version, rather than the shadowed version.  Ask user
  instead.

* AJAX login with no page reloads or redirects.

* If login fails, don't redirect, display a message error in TW

* Make instructions for how to use cookie-based login rather than HTTP Basic.

    * http://www.zopelabs.com/cookbook/1073516045

    * Write a new login script that will just return the bare minimum -- status.html

    * Check for/load private tiddlers on login.

* Why did Tim hack out the Zope <base> tag?  What harm does this do?

* Tiddler renames are stored in the history, we should display them.

* highlight which historical revision we're looking at in revisions macro

    * Revision history does not seem reliable.

* On TiddlyNotes, if I log in using my AJAX method, I don't get the new
  tiddlers.  If I reload, it thinks I've not logged in.  If I go to the ZMI
  (which does NOT ask for a second login) and then back to TiddlyNotes, I get
  the logged-in content.

* Ignore saves/changes that have the same modifier, text, title, and tags.

* The tiddler gets the revisionKey corresponding to the current version, but if
  ignore_revision is set (which it always seems to be for the most recent
  edit?) then displayRevisions gets a list from the server that *doesn't*
  contain the current version.

* chkInsertTab should not insert tabs to input boxes, only textareas

* Creating new tiddlers is giving them AnonymousUser... (sequence: load
  anonymous, login to ZMI, login on anonymous test21)

* Plugin: jsMath is linear in time with the number of math elements *in the
  document*, not the number of elements being wikified!  LatexMathML is about
  twice as fast.

* Make the ZiddlyWiki code a plugin.

* Remove the id argument of actions/save.  This can be computed on the
  server-side and the client side shouldn't care what the id is.

* Check whether cookie-based auth is enabled.  If so, present AJAX username and
  password field.  If not, just display the "login" button, and do the same
  AJAX post to ?action=login, which will invoke the browser's Basic auth
  dialog!

* Perhaps ZW is sending a path with the auth credential that doesn't cover the
  main TW file?

* objectValues in status.js fails if there are ANY unauthorized tiddlers in the
  folder.  Need to use a script to give a list of tiddlers.  (and while I'm at
  it...I might as well return revisionKey's too!)  Then status.js should
  replace get_modified.

* Need 'View History' permission on tiddlers folder.  Make a note about this in
  changelog, and/or an upgrade script.

* permaviewHash used only by <<logout>> which doesn't work anyway...

* don't display <<revisions>> for shadow tiddlers.

* Revisions seem to work now, but still need to deal with: 
    1) renames, 
    2) If a spurious lock exists, the most recent revision has ignore_revision...
