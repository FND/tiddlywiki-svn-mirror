## Script (Python) "get_all"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=roots=None
##title=
##
#if roots: context = roots
#path = '/'.join(context.getPhysicalPath())

tiddler = []
tiddlers = {}

tag = context.REQUEST.get('tag', None)

for context in roots:
  for tiddlerid in context.tiddlers.objectIds('DTML Document'):
    try: tiddler = context.tiddlers[tiddlerid]
    except: continue # if we don't have permission (private tiddlers)
  
    # get basic details
    modified = container.scripts.get_modified(tiddler)
  
    # add necessary properties (for backwards compat)
    if not hasattr(tiddler, 'modified'):
      tiddler.manage_addProperty('modified', modified, 'string')
    if not hasattr(tiddler, 'created'):
      tiddler.manage_addProperty('created', modified, 'string')
  
    # get other basic details
    title = tiddler.title_or_id().replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')
    created = tiddler.created
    modifier = getattr(tiddler, 'modifier', '')
    tags = getattr(tiddler, 'tags', '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')
    body = tiddler(context, context.REQUEST).replace('\\', '\\s').replace('\n', '\\n').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')
    context.REQUEST.set('last_transaction', 200) # Force it to go further back in history
    for rev in tiddler.manage_change_history():
        if not hasattr(tiddler.HistoricalRevisions[rev['key']],'ignore_revision'):
            key = rev['key']
            break
  
    # check that the tiddler's id is correct (for backwards compat)
    id = container.scripts.sanitize_id(tiddler.title_or_id())
    if id != tiddler.id():
      try:
        context.tiddlers.manage_renameObject(tiddler.id(), id)
      except:
        raise Exception, 'I was unable to automatically migrate your tiddler ids because you have two or more tiddlers with the title "%s". Please browse to %s and delete the tiddler(s) you do not want to keep.' % (tiddler.title_or_id(), context.tiddlers.absolute_url()+'/manage/')
  
    # check for special tags and privileges
    taglist = tags.split()
    if 'private' in taglist and 'Authenticated' not in context.REQUEST.AUTHENTICATED_USER.getRoles():
      continue
    if 'onlyAdmin' in taglist and 'Manager' not in context.REQUEST.AUTHENTICATED_USER.getRoles():
      continue
    if 'deleted' in taglist:
      continue
    if tag is not None and tag not in taglist:
      continue
  
    # assemble the details
    tiddler = {
      'title': title,
      'created': created,
      'modified': modified,
      'modifier': modifier,
      'tags': tags,
      'body': body,
      'key': key
    }
    try: tiddlers[title]
    except KeyError: tiddlers[title] = tiddler

return tiddlers
