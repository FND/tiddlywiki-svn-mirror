## Script (Python) "get_div"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=root=None
##title=
##

if root: context = root
path = '/'.join(context.getPhysicalPath())

req = context.REQUEST
revision = req.get('revision', None)
id = container.scripts.sanitize_id(req.get('title'))

try: tiddler = context.tiddlers[id]
except:
    try: tiddler = container.aq_parent.tiddlers[id]
    except:
        context.REQUEST.RESPONSE.setStatus(404) # detail.value);
        return

# FIXME permission denied
tags = getattr(tiddler, 'tags', '')
if 'private' in tags.split() and 'Authenticated' not in context.REQUEST.AUTHENTICATED_USER.getRoles():
    context.REQUEST.RESPONSE.setStatus(403, "Log in to see private tiddlers")
    return
if 'onlyAdmin' in tags.split() and 'Manager' not in context.REQUEST.AUTHENTICATED_USER.getRoles():
    context.REQUEST.RESPONSE.setStatus(403, "Log in to see onlyAdmin tiddlers")
    return

if revision:
  try: tiddler = tiddler.HistoricalRevisions[revision]
  except: 
    context.REQUEST.RESPONSE.setStatus(404)
    return
else:
    context.REQUEST.set('last_transaction', 200) # Force it to go further back in history
    for rev in tiddler.manage_change_history():
        if not hasattr(tiddler.HistoricalRevisions[rev['key']],'ignore_revision'):
            revision = rev['key']
            break

modified = container.scripts.get_modified(tiddler)

if hasattr(tiddler, 'created'):
  created = tiddler.created
else:
  created = modified

return '<div tiddler="%s" modifier="%s" modified="%s" created="%s" tags="%s" revisionkey="%s">%s</div>'\
    %(tiddler.title, getattr(tiddler, 'modifier', ''), modified, created, \
      tiddler.tags.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;'),\
      revision,\
      tiddler(context, context.REQUEST).replace('\\', '\\s').replace('\n', '\\n').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;'))
