modifier: ChrisDent
created: 200803250000
modified: 200809240000
tags: systemConfig excludeLists excludeSearch

/***
|''Name:''|TiddlyWebAdaptorPlugin|
|''Description:''|TiddlyWeb Adaptor based on Example Adaptor|
|''Author:''|Chris Dent (cdent (at) peermore (dot) com)|
|''Source:''|http://svn.tiddlywiki.org/Trunk/contributors/ChrisDent/TiddlyWebAdaptorPlugin.js |
|''CodeRepository:''|http://svn.tiddlywiki.org/Trunk/contributors/ChrisDent/TiddlyWebAdaptorPlugin.js |
|''Version:''|0.0.5|
|''Status:''|@@experimental@@|
|''Date:''|Mar 25, 2008|
|''Comments:''|Please make comments at http://groups.google.co.uk/group/TiddlyWikiDev |
|''License:''||
|''~CoreVersion:''|2.4.1|
***/
//{{{
//# Ensure that the plugin is only installed once.
if(!version.extensions.TiddlyWebAdaptorPlugin) {
version.extensions.TiddlyWebAdaptorPlugin = {installed:true};

function TiddlyWebAdaptor() {}

TiddlyWebAdaptor.prototype = new AdaptorBase();

TiddlyWebAdaptor.mimeType = 'application/json';
TiddlyWebAdaptor.serverType = 'tiddlyweb'; // MUST BE LOWER CASE
TiddlyWebAdaptor.serverLabel = 'TiddlyWeb';
TiddlyWebAdaptor.serverParsingErrorMessage = "Error parsing result from server";
TiddlyWebAdaptor.errorInFunctionMessage = "Error in function TiddlyWebAdaptor.%0";

// Convert a page title to the normalized form used in uris
TiddlyWebAdaptor.normalizedTitle = function(title)
{
	return title;
};

TiddlyWebAdaptor.prototype.getWorkspaceList = function(context,userParams,callback)
{
	displayMessage("getWorkspaceList");
	context = this.setContext(context,userParams,callback);
	var uriTemplate = '%0/recipes';
	var uri = uriTemplate.format([context.host]);
	var req = httpReq('GET',uri,TiddlyWebAdaptor.getWorkspaceListCallback,context,{'accept':'application/json'});
	return typeof req == 'string' ? req : true;
};

TiddlyWebAdaptor.getWorkspaceListCallback = function(status,context,responseText,uri,xhr)
{
	context.status = false;
	context.statusText = TiddlyWebAdaptor.errorInFunctionMessage.format(['getWorkspaceListCallback']);
	if(status) {
		try {
			var workspaces;
			eval('workspaces = ' + responseText);
		} catch (ex) {
			context.statusText = exceptionText(ex,TiddlyWebAdaptor.serverParsingErrorMessage);
			if(context.callback) {
				context.callback(context,context.userParams);
			}
			return;
		}
		var list = [];
		for(var i = 0; i < workspaces.length; i++) {
			list.push({title:workspaces[i]});
		}
		context.workspaces = list;
		context.status = true;
	} else {
		context.statusText = xhr.statusText;
	}
	if(context.callback) {
		context.callback(context,context.userParams);
	}
};

TiddlyWebAdaptor.prototype.getTiddlerList = function(context,userParams,callback)
{
	context = this.setContext(context,userParams,callback);
	var uriTemplate = '%0/%1/%2/tiddlers';
	if(context.bag) {
		var uri = uriTemplate.format([context.host,'bags',context.bag]);
	} else {
		uri = uriTemplate.format([context.host,'recipes',context.workspace]);
	}
	var req = httpReq('GET',uri,TiddlyWebAdaptor.getTiddlerListCallback,context, {'accept':'application/json'});
	return typeof req == 'string' ? req : true;
};

TiddlyWebAdaptor.getTiddlerListCallback = function(status,context,responseText,uri,xhr)
{
	context.status = false;
	context.statusText = TiddlyWebAdaptor.errorInFunctionMessage.format(['getTiddlerListCallback']);
	context.tiddlers = [];
	if(status) {
		try {
			var tiddlers;
			eval('tiddlers = ' + responseText);
		} catch (ex) {
			context.statusText = exceptionText(ex,TiddlyWebAdaptor.serverParsingErrorMessage);
			if(context.callback) {
				context.callback(context,context.userParams);
			}
			return;
		}
		for(var i = 0; i < tiddlers.length; i++) {
			var ti = tiddlers[i];
			var tiddler = new Tiddler(ti.title);
			tiddler.assign(ti.title,null,ti.modifier,ti.modified,ti.tags,ti.created,ti.fields);
			tiddler.fields['server.page.revision'] = ti.revision;
			if(ti.bag) {
				tiddler.fields['server.bag'] = ti.bag;
			} else {
				tiddler.fields['server.workspace'] = ti.workspace;
			}
			context.tiddlers.push(tiddler);
		}
		context.status = true;
	} else {
		context.statusText = xhr.statusText;
	}
	if(context.callback) {
		context.callback(context,context.userParams);
	}
};

TiddlyWebAdaptor.prototype.getSearchResults = function(context,userParams,callback) {
	context = this.setContext(context,userParams,callback);
	var uriTemplate = '%0/search?q=%1';
	var uri = uriTemplate.format([context.host, context.query]);
	var req = httpReq('GET',uri,TiddlyWebAdaptor.getSearchResultsCallback,
		context,{ accept: "application/json" });
	return typeof req == "string" ? req : true;
};

TiddlyWebAdaptor.getSearchResultsCallback = function(status,context,responseText,uri,xhr) {
	TiddlyWebAdaptor.getTiddlerListCallback(status,context,responseText,uri,xhr);
};

TiddlyWebAdaptor.prototype.generateTiddlerInfo = function(tiddler)
{
	var info = {};
	var host = this && this.host ? this.host : tiddler.fields['server.host'];
	host = this.fullHostName(host);
	var bag = tiddler.fields['server.bag'];
	var uriTemplate = '%0/%1/%2/tiddlers/%3';
	if(bag) {
		info.uri = uriTemplate.format([host,'bags',bag,tiddler.title]);
	} else {
		var workspace = tiddler.fields['server.workspace'];
		info.uri = uriTemplate.format([host,'recipes',workspace,tiddler.title]);
	}
	return info;
};

TiddlyWebAdaptor.prototype.getTiddlerRevision = function(title,revision,context,userParams,callback)
{
	context = this.setContext(context,userParams,callback);
	if(revision) {
		context.revision = revision;
	}
	return this.getTiddler(title,context,userParams,callback);
};

TiddlyWebAdaptor.prototype.getTiddler = function(title,context,userParams,callback)
{
	context = this.setContext(context,userParams,callback);
	if(title) {
		context.title = title;
	}
	if(context.revision) {
		var uriTemplate = '%0/%1/%2/tiddlers/%3/revisions/%4';
	} else {
		uriTemplate = '%0/%1/%2/tiddlers/%3';
	}
	context.tiddler = new Tiddler(title);
	context.tiddler.fields['server.type'] = TiddlyWebAdaptor.serverType;
	context.tiddler.fields['server.host'] = AdaptorBase.minHostName(context.host);
	if(context.bag) {
		var uri = uriTemplate.format([context.host,'bags',context.bag,
			TiddlyWebAdaptor.normalizedTitle(title),context.revision]);
		context.tiddler.fields['server.bag'] = context.bag;
	} else {
		uri = uriTemplate.format([context.host,'recipes',context.workspace,
			TiddlyWebAdaptor.normalizedTitle(title),context.revision]);
		context.tiddler.fields['server.workspace'] = context.workspace;
	}
	var req = httpReq('GET',uri,TiddlyWebAdaptor.getTiddlerCallback,context, {'accept':'application/json'});
	return typeof req == 'string' ? req : true;
};

TiddlyWebAdaptor.getTiddlerCallback = function(status,context,responseText,uri,xhr)
{
	context.status = false;
	context.statusText = TiddlyWebAdaptor.errorInFunctionMessage.format(['getTiddlerCallback']);
	if(status) {
		try {
			var info;
			eval('info = ' + responseText);
		} catch (ex) {
			context.statusText = exceptionText(ex,TiddlyWebAdaptor.serverParsingErrorMessage);
			if(context.callback) {
				context.callback(context,context.userParams);
			}
			return;
		}
		context.tiddler.text = info.text;
		context.tiddler.tags = info.tags||[];
		context.tiddler.fields['server.page.revision'] = info.revision;
		context.tiddler.modifier = info.modifier;
		context.tiddler.modified = Date.convertFromYYYYMMDDHHMM(info.modified);
		context.tiddler.created = Date.convertFromYYYYMMDDHHMM(info.created);
		if(info.bag) {
			context.tiddler.fields['server.bag'] = info.bag;
		} else {
			context.tiddler.fields['server.workspace'] = info.workspace;
		}
		context.status = true;
	} else {
		context.statusText = xhr.statusText;
		if(context.callback) {
			context.callback(context,context.userParams);
		}
		return;
	}
	if(context.callback) {
		context.callback(context,context.userParams);
	}
};

TiddlyWebAdaptor.prototype.getTiddlerRevisionList = function(title,limit,context,userParams,callback)
{
	context = this.setContext(context,userParams,callback);
	//var uriTemplate = '%0/recipes/%1/tiddlers/%2/revisions';
	var uriTemplate = '%0/%1/%2/tiddlers/%3/revisions';
	if(context.bag) {
		var uri = uriTemplate.format([context.host,'bags',context.bag,TiddlyWebAdaptor.normalizedTitle(title)]);
	} else {
		uri = uriTemplate.format([context.host,'recipes',context.workspace,TiddlyWebAdaptor.normalizedTitle(title)]);
	}
	var req = httpReq('GET',uri,TiddlyWebAdaptor.getTiddlerRevisionListCallback,context, {'accept':'application/json'});
	return typeof req == 'string' ? req : true;
};

TiddlyWebAdaptor.getTiddlerRevisionListCallback = function(status,context,responseText,uri,xhr)
{
	context.status = false;
	if(status) {
		try {
			var tiddlers;
			eval('tiddlers = ' + responseText);
		} catch (ex) {
			context.statusText = exceptionText(ex,TiddlyWebAdaptor.serverParsingErrorMessage);
			if(context.callback) {
				context.callback(context,context.userParams);
			}
			return;
		}
		var list = [];
		for(var i = 0; i < tiddlers.length; i++) {
			var ti = tiddlers[i];
			var tiddler = new Tiddler(ti.title);
			tiddler.modifier = ti.modifier;
			tiddler.tags = ti.tags;
			tiddler.modified = Date.convertFromYYYYMMDDHHMM(ti.modified);
			tiddler.created = Date.convertFromYYYYMMDDHHMM(ti.created);
			tiddler.fields['server.page.revision'] = ti.revision;
			if(ti.bag) {
				tiddler.fields['server.bag'] = ti.bag;
			} else {
				tiddler.fields['server.workspace'] = ti.workspace;
			}
			list.push(tiddler);
		}
		var sortField = 'server.page.revision';
		list.sort(function(a,b) {
			return a.fields[sortField] < b.fields[sortField] ? +1 :
				(a.fields[sortField] == b.fields[sortField] ? 0 : -1);
		 });
		context.revisions = list;
		context.status = true;
	} else {
		context.statusText = xhr.statusText;
	}
	if(context.callback) {
		context.callback(context,context.userParams);
	}
};

TiddlyWebAdaptor.prototype.putTiddler = function(tiddler,context,userParams,callback)
{
	context = this.setContext(context,userParams,callback);
	context.title = tiddler.title;
	var host = context.host ? context.host : this.fullHostName(tiddler.fields['server.host']);
	var bag = tiddler.fields['server.bag'];
	var uri;
	if(bag) {
		var baguriTemplate = '%0/bags/%1/tiddlers/%2';
		uri = baguriTemplate.format([host,bag,tiddler.title]);
	} else if(context.workspace) {
		var recipeuriTemplate = '%0/recipes/%1/tiddlers/%2';
		uri = recipeuriTemplate.format([host,context.workspace,tiddler.title]);
	} else {
		return 'no bag or recipe available for tiddler, set recipe';
	}
	payload = {
		title: tiddler.title,
		text: tiddler.text,
		modifier: tiddler.modifier,
		tags: tiddler.tags,
		revision: tiddler['server.page.revision']
	};
	payload = JSON.stringify(payload);
	var req = httpReq('PUT',uri,TiddlyWebAdaptor.putTiddlerCallback,context,{},payload,TiddlyWebAdaptor.mimeType);
	return typeof req == 'string' ? req : true;
};

TiddlyWebAdaptor.putTiddlerCallback = function(status,context,responseText,uri,xhr)
{
	if(status) {
		context.status = true;
	} else {
		displayMessage('putTiddler XHR status is' + xhr.status);
		displayMessage('putTiddler XHR status text is' + xhr.statusText);
		context.status = false;
		context.statusText = xhr.statusText;
	}
	if(context.callback) {
		context.callback(context,context.userParams);
	}
};

config.adaptors[TiddlyWebAdaptor.serverType] = TiddlyWebAdaptor;
} //# end of 'install only once'

/***
!JSON Code, used to serialize the data
***/
/*
Copyright (c) 2005 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/*
	The global object JSON contains two methods.

	JSON.stringify(value) takes a JavaScript value and produces a JSON text.
	The value must not be cyclical.

	JSON.parse(text) takes a JSON text and produces a JavaScript value. It will
	throw a 'JSONError' exception if there is an error.
*/
var JSON = {
	copyright: '(c)2005 JSON.org',
	license: 'http://www.crockford.com/JSON/license.html',
/*
	Stringify a JavaScript value, producing a JSON text.
*/
	stringify: function (v) {
	var a = [];

/*
	Emit a string.
*/
	function e(s) {
		a[a.length] = s;
	}

/*
	Convert a value.
*/
	function g(x) {
		var c, i, l, v;

		switch (typeof x) {
		case 'object':
		if (x) {
			if (x instanceof Array) {
			e('[');
			l = a.length;
			for (i = 0; i < x.length; i += 1) {
				v = x[i];
				if (typeof v != 'undefined' &&
					typeof v != 'function') {
				if (l < a.length) {
					e(',');
				}
				g(v);
				}
			}
			e(']');
			return;
			} else if (typeof x.toString != 'undefined') {
			e('{');
			l = a.length;
			for (i in x) {
				v = x[i];
				if (x.hasOwnProperty(i) &&
					typeof v != 'undefined' &&
					typeof v != 'function') {
				if (l < a.length) {
					e(',');
				}
				g(i);
				e(':');
				g(v);
				}
			}
			return e('}');
			}
		}
		e('null');
		return;
		case 'number':
		e(isFinite(x) ? +x : 'null');
		return;
		case 'string':
		l = x.length;
		e('"');
		for (i = 0; i < l; i += 1) {
			c = x.charAt(i);
			if (c >= ' ') {
			if (c == '\\' || c == '"') {
				e('\\');
			}
			e(c);
			} else {
			switch (c) {
				case '\b':
				e('\\b');
				break;
				case '\f':
				e('\\f');
				break;
				case '\n':
				e('\\n');
				break;
				case '\r':
				e('\\r');
				break;
				case '\t':
				e('\\t');
				break;
				default:
				c = c.charCodeAt();
				e('\\u00' + Math.floor(c / 16).toString(16) +
					(c % 16).toString(16));
			}
			}
		}
		e('"');
		return;
		case 'boolean':
		e(String(x));
		return;
		default:
		e('null');
		return;
		}
	}
	g(v);
	return a.join('');
	},
/*
	Parse a JSON text, producing a JavaScript value.
*/
	parse: function (text) {
	var p = /^\s*(([,:{}\[\]])|"(\\.|[^\x00-\x1f"\\])*"|-?\d+(\.\d*)?([eE][+-]?\d+)?|true|false|null)\s*/,
		token,
		operator;

	function error(m, t) {
		throw {
		name: 'JSONError',
		message: m,
		text: t || operator || token
		};
	}

	function next(b) {
		if (b && b != operator) {
		error("Expected '" + b + "'");
		}
		if (text) {
		var t = p.exec(text);
		if (t) {
			if (t[2]) {
			token = null;
			operator = t[2];
			} else {
			operator = null;
			try {
				token = eval(t[1]);
			} catch (e) {
				error("Bad token", t[1]);
			}
			}
			text = text.substring(t[0].length);
		} else {
			error("Unrecognized token", text);
		}
		} else {
		token = operator = undefined;
		}
	}


	function val() {
		var k, o;
		switch (operator) {
		case '{':
		next('{');
		o = {};
		if (operator != '}') {
			for (;;) {
			if (operator || typeof token != 'string') {
				error("Missing key");
			}
			k = token;
			next();
			next(':');
			o[k] = val();
			if (operator != ',') {
				break;
			}
			next(',');
			}
		}
		next('}');
		return o;
		case '[':
		next('[');
		o = [];
		if (operator != ']') {
			for (;;) {
			o.push(val());
			if (operator != ',') {
				break;
			}
			next(',');
			}
		}
		next(']');
		return o;
		default:
		if (operator !== null) {
			error("Missing value");
		}
		k = token;
		next();
		return k;
		}
	}
	next();
	return val();
	}
};

//}}}
