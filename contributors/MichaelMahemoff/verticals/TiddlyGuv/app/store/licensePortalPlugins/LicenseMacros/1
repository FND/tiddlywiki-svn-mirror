modifier: MichaelMahemoff
created: 200508181151
modified: 200609101232
tags: systemConfig

/***
|''Name''|
|''Description''|
|''Version''|1.0.0
|''Status''|stable
|''License''|[[BSD open source license]]
|''~CoreVersion''|2.4.0
!Usage
{{{
<<license>>
}}}
Aggregates license tiddlers
!Code
***/
//{{{
if(!version.extensions.LicensePlugin) {
version.extensions.LicensePlugin = {installed:true};
//--
//-- License
//--
config.macros.license = {};

config.macros.license.dimensions = {
  plain:  { name: "In Plain English",      id: "plain",  adminOnly: false },
  policy: { name: "Usage Policy",          id: "policy", adminOnly: true  },
  text:   { name: "Official Text",         id: "text",   adminOnly: false },
  usage:  { name: "Usage in our Company",  id: "usage",  adminOnly: false },
  links:  { name: "Useful Links",          id: "links",  adminOnly: false }
}

// quick fix until FND implements rename
// tags param necessary because "remove" will tag as exclude etc
function changeBag(tiddler, bag, tags) {

  var tiddlerText = tiddler.text;
  store.removeTiddler(tiddler.title);
  autoSaveChanges();

  var now=new Date();
  var newTiddler = store.createTiddler(tiddler.title);
  // newFields is a _copy_ of server.* fields overlayed on existing fields
  var newFields = merge({ "server.host": tiddler.fields["server.host"], "server.type": "tiddlyweb", "server.workspace": "bags/"+bag, stage: "public" }, tiddler.fields, true);
  log("newFields", newFields);
  newFields.deleted = false;
  log("existing tags", tiddler, tiddler.tags);
  newTiddler.set(null, tiddlerText, config.options.txtUserName, now, tags, now, newFields);
  store.saveTiddler(newTiddler.title);
  autoSaveChanges(false);

  return newTiddler;
    
}

config.macros.license.handler = function(place,macroName,params,wikifier,paramString,tiddler) {

  var license = tiddler.title; // e.g. Apache_2_0
  if (tiddler.fields["stage"]=="new") {
    createTiddlyElement(place, "div", null, "newLicenseMessage",
      "This license description is not yet public. Once you have filled out sufficient details," +
      "you can click the publish button to make it public.");
    var publish = createTiddlyElement(place, "button", null, "publishMessage", "Publish It!");
    publish.onclick = function() {

      var oldLicense = store.getTiddler(license);
      oldLicense.tags=["License"];
      var publicLicense = changeBag(oldLicense, "licenses", ["License"]);
      for (var id in config.macros.license.dimensions) {
        var dimension = config.macros.license.dimensions[id];
        var dimensionTiddler = store.getTiddler(license + "_" + id);
        log("promoting", id, dimensionTiddler);
        if (dimensionTiddler)
          changeBag(dimensionTiddler,
            dimension.adminOnly ? "protected-admins" : "licenses", ["licenseDimension"]);
      }
      story.displayTiddler("top", publicLicense);

    }
  } else {
    createTiddlyElement(place, "div", null, "newLicenseMessage", "This license description is public.");
  }

  for (var id in config.macros.license.dimensions) {
    var dimension = config.macros.license.dimensions[id];
    var dimensionTitle = license + "_" + dimension.id;
    var licenseDimensionTiddler = store.getTiddler(dimensionTitle);
    console.log("dim", dimensionTitle, licenseDimensionTiddler);
    var wrapper = createTiddlyElement(place, "div", null, "license");
    // var heading = createTiddlyElement(wrapper, "h2", null, null, dimension.name);
    var heading = createTiddlyElement(wrapper, "h2", "heading_"+dimensionTitle, null);
    createTiddlyElement(heading, "span", null, null, dimension.name);

    if (!dimension.adminOnly || isAdmin()) {
      var editLink = createTiddlyElement(heading, "span", null, "editLink", "edit");
      (function(dimensionTitle, tiddler, dimension) {
        editLink.onclick = function() {
          if (!store.getTiddler(dimensionTitle)) {
            var dimensionTiddler = store.createTiddler(dimensionTitle);
            var now = new Date();
            var fields = clone(config.defaultCustomFields);
            fields["license"] = tiddler.title;
            fields["dimension"] = dimension.id;
            fields["server.workspace"] = "bags/licenses"
            if (tiddler.fields["stage"]=="new") {
              fields["server.workspace"] = "bags/private-"+config.options.txtUserName;
            } else if (dimension.adminOnly) {
              fields["server.workspace"] = "bags/protected-admins";
            }
            dimensionTiddler.set(null, "", config.options.txtUserName, now, ["licenseDimension"], now, fields);
            store.saveTiddler(dimensionTitle);
          }
          story.displayTiddler("top", dimensionTitle, "LicenseDimensionEditTemplate"); // template showing main license
        }
      })(dimensionTitle, tiddler, dimension);
  }

    (function(licenseDimensionTiddler, wrapper) {
      var contentEl = createTiddlyElement(wrapper, "div");
      var textEl;
      if (licenseDimensionTiddler) {

        if (dimension.adminOnly) {
          var adminOnlyMessage = createTiddlyElement(contentEl, "div", null, "adminOnlyMessage", "");
        adminOnlyMessage.innerHTML = "<strong>Official Policy.</strong> This section constitutes official policy and is editable by admins only. If you have any amendements or feedback, please leave a comment about this license at the bottom of the page.";
        }

        var expandLinkArea = createTiddlyElement(contentEl, "div");
        var expandLink = createTiddlyElement(expandLinkArea, "span", "",  "expandLink");
        expandLinkArea.style.display = "none";
        var text = licenseDimensionTiddler.text;
        textEl = createTiddlyElement(contentEl, "div");
        wikify(text, textEl);
        if (text.length > 1024) {
          expandLinkArea.style.display = "block";
          toggleVisibility(expandLink, textEl, wordCount(text), false);
          expandLink.onclick = function() { toggleVisibility(expandLink, textEl, wordCount(text)); };
        }

      } else {
        heading.className = "empty";
        textEl = createTiddlyElement(wrapper, "div", null, "emptinessMessage",
          "This section does not exist" +
          (dimension.adminOnly ? "" : ", but you can start it yourself") +
          ".");
      }

    })(licenseDimensionTiddler, wrapper);

  }

  function toggleVisibility(expandLink, textEl, wordCount, forcedVisibility) {
    console.log("toggle", arguments);
    if (arguments.length==4) visible = forcedVisibility;
    else visible = (textEl.style.display=="none");
    console.log("visible", visible);
    textEl.style.display = visible ? "block" : "none";
    console.log("displ", textEl.style.display, "content", textEl.innerHTML.substr(0,100));
    expandLink.innerHTML = visible ? "« Hide this" : "Show all " + (wordCount + " words »"); 
  }

  config.macros.licenseDimension= {};
  config.macros.licenseDimension.handler = function(place,macroName,params,wikifier,paramString,tiddler) {
    // if (params[0]!="licenseTitle") return;
    var breadcrumb = createTiddlyElement(place, "div", null, null);
    var licenseLink = createTiddlyElement(breadcrumb, "span", null, "licenseLink", tiddler.fields.license);
    createTiddlyElement(breadcrumb, "span", null, "licenseLinkArrow", " > ");
    createTiddlyElement(breadcrumb, "span", null, "licenseDimensionName", config.macros.license.dimensions[tiddler.fields.dimension].name);
    licenseLink.onclick = function() { story.displayTiddler("top", tiddler.fields.license); }
  }

  var origSaveTiddler = config.commands.saveTiddler.handler;
  config.commands.saveTiddler.handler = function(event,src,title) {
    console.log("This is updated saveTiddler");
    origSaveTiddler.apply(this, arguments);

    var tiddler = store.getTiddler(title);
    if (!tiddler) return;
    // store.saveTiddler(title);
    // autoSaveChanges();

    if (tiddler.isTagged("licenseDimension")) {
      story.closeTiddler(title);
      story.displayTiddler("top", tiddler.fields.license);
      var heading = document.getElementById("heading_" + title);
      heading.className = "recentlyEdited";
      // scroll not working due to race cond
      // window.scrollTo(heading.offsetLeft, heading.offsetTop);
    }

  }

  var origChooseTemplateForTiddler = Story.prototype.chooseTemplateForTiddler;
  Story.prototype.chooseTemplateForTiddler = function(title,template) {
    var tiddler=store.getTiddler(title);
    if (tiddler && tiddler.isTagged("license")) {
      var stageTemplate = tiddler.fields.stage + template;
      if (store.getTiddler(stageTemplate)) return stageTemplate;
    }
    return origChooseTemplateForTiddler.apply(this, arguments);
  }

}

}

/*
var origCloseTiddler = config.commands.closeTiddler.handler;
config.commands.closeTiddler.handler = function(event,src,title)
{
  origCloseTiddler.apply(this, arguments);
  var tiddler = store.getTiddler(title);
  if (tiddler && tiddler.isTagged("licenseDimension")) {
    story.displayTiddler(tiddler.fields.license);
  }
    // story.displayTiddler("top", tiddler.fields.license);
};
*/

//}}}
