{resources:[
	{name:'Applications',
		methods:[
			{
				name:'getApplication',
				docs:'Get application details',
				uri:'apps/{domainValue}:{applicationIdValue}',
				httpMethod:'GET',
				params:[
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'The domain to which the Application belongs'},
					{name:'applicationId',type:'xs:string',required:true,isArray:false,doc:'Globally unique Application identifier.'}
				 ]
			},
			{
				name:'getApplications',
				docs:'Retrieves details of applications in the same domain as the current application',
				uri:'apps',
				httpMethod:'GET',
				params:[{name:'startIndex',isArray:false,doc:'the first result to return when requesting a paged list (optional)'},{name:'count',isArray:false,doc:'the number of results to return when requesting a paged list (required if a start index is supplied)'},{name:'filterBy',isArray:false,doc:'an key to an index with which to filter results (optional)'},{name:'filterValue',isArray:false,doc:'the value to search within the filter for (required if a filter is supplied)'}
				 ]
			},
			{
				name:'updateApplication',
				docs:'Changes the URL used for event callbacks, can also toggle whether the application supports two legged (desktop) authentication',
				uri:'apps/{domainValue}:{applicationIdValue}',
				httpMethod:'PUT',
				params:[
					{name:'notificationUrl',type:'xs:string',required:false,isArray:false,doc:'The URL where event notifications are sent. '},
					{name:'allow2legged',type:'xs:boolean',required:false,isArray:false,doc:'Whether this Application can use two legged (desktop) authentication'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'The domain to which the Application belongs'},
					{name:'applicationId',type:'xs:string',required:true,isArray:false,doc:'Globally unique Application identifier.'}
				 ]
			}
		]
	},
	{name:'Calls',
		methods:[
			{
				name:'createCall',
				docs:'Calls may be made to one or more Devices. To connect Calls to PSTN numbers on the production platform, credit must be available in the User\'s Account to cover the cost of connecting for at least one minute.',
				uri:'calls/{userId}',
				httpMethod:'POST',
				params:[
					{name:'legs',type:'xs:string',required:true,isArray:true,doc:'Device IDs which participate in this call (SIP: or TEL: only)'},
					{name:'callerid',type:'xs:string',required:false,isArray:false,doc:'The number which will be presented when devices are called'},
					{name:'mode',type:'xs:string',required:false,isArray:false,doc:'The mode of a call or leg describes it\'s state.  Options are: hold, mute, hangup, talk'},
					{name:'announce',type:'xs:string',required:false,isArray:false,doc:'The Text to Speech culture to use, available from constants in this class'}
				 ]
			},
			{
				name:'createThirdPartyCall',
				docs:'Calls may be made between any two Devices. To connect Calls to PSTN numbers on the production platform, credit must be available in the User\'s Account to cover the cost of connecting for at least one minute.',
				uri:'calls/{userId}',
				httpMethod:'POST',
				params:[
					{name:'source',type:'xs:string',required:true,isArray:false,doc:'Device ID (or alias) from which the Call is made (SIP: or TEL: only)'},
					{name:'dest',type:'xs:string',required:true,isArray:true,doc:'Device IDs to which this Call is made (SIP: or TEL: only)'}
				 ]
			},
			{
				name:'getCall',
				docs:'Once a Call is made the details may be retrieved to show the current status of each Leg. Only the Call owner is able to query the Call details.',
				uri:'calls/{userId}/{callId}',
				httpMethod:'GET',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'}
				 ]
			},
			{
				name:'getCalls',
				docs:'The Call history can be retrieved by making a GET on the Call resource.  The result is a collection of Calls.',
				uri:'calls/{userId}',
				httpMethod:'GET',
				params:[{name:'startIndex',isArray:false,doc:'the first result to return when requesting a paged list (optional)'},{name:'count',isArray:false,doc:'the number of results to return when requesting a paged list (required if a start index is supplied)'},{name:'filterBy',isArray:false,doc:'an key to an index with which to filter results (optional)'},{name:'filterValue',isArray:false,doc:'the value to search within the filter for (required if a filter is supplied)'}
				 ]
			},
			{
				name:'transferLeg',
				docs:'Transfers a call leg from one call to another. The leg must be answered, and the destination call must be active ',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'sourceCallId',type:'xs:string',required:true,isArray:false,doc:'The call id from which the leg should be transferred'},
					{name:'sourceLegId',type:'xs:string',required:true,isArray:false,doc:'The source call leg identifier'},
					{name:'destinationCallId',type:'xs:string',required:true,isArray:false,doc:'The call id to which the leg should be transferred'}
				 ]
			},
			{
				name:'updateCall',
				docs:'Updates a call to change the mode of all legs, start and stop call recording, or play media to all the legs. The call must contain at least one active leg.',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'id',type:'xs:string',required:false,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'mode',type:'xs:string',required:false,isArray:false,doc:'The mode of a call or leg describes it\'s state.  Options are: hold, mute, hangup, talk'},
					{name:'active',type:'xs:boolean',required:false,isArray:false,doc:'Whether the call is active'},
					{name:'record',type:'callRecordRequest',required:false,isArray:false,doc:'An object containing details of the recording request'},
					{name:'recording',type:'xs:boolean',required:false,isArray:false,doc:'True if recording is active. Set to false to stop recording'},
					{name:'announce',type:'xs:string',required:false,isArray:false,doc:'The Text to Speech culture to use, available from constants in this class'},
					{name:'play',type:'callPlayRequest',required:false,isArray:false,doc:'An object containing details of the recording request'},
					{name:'playing',type:'xs:boolean',required:false,isArray:false,doc:'True if media is playing. Set to false to stop playing'}
				 ]
			},
			{
				name:'updateCallLeg',
				docs:'Updates the mode of a call leg, records it, or plays media to it, or requests DTMF (keypad) input. The leg must be active to respond to update requests',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'},
					{name:'mode',type:'xs:string',required:false,isArray:false,doc:'The mode of a call or leg describes it\'s state.  Options are: hold, mute, hangup, talk'},
					{name:'requestDtmf',type:'callLegDtmfRequest',required:false,isArray:false,doc:'An object containing details of a request to collect DTMF input from a call leg'},
					{name:'record',type:'callRecordRequest',required:false,isArray:false,doc:'An object containing details of the recording request'},
					{name:'recording',type:'xs:boolean',required:false,isArray:false,doc:'True if recording is active. Set to false to stop recording'},
					{name:'announce',type:'xs:string',required:false,isArray:false,doc:'The Text to Speech culture to use, available from constants in this class'},
					{name:'play',type:'callPlayRequest',required:false,isArray:false,doc:'An object containing details of the recording request'},
					{name:'playing',type:'xs:boolean',required:false,isArray:false,doc:'True if media is playing. Set to false to stop playing'}
				 ]
			},
			
			{
				name:'hangupCall',
				docs:'Terminates the call',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'}
				]
			},
			{
				name:'hangupLeg',
				docs:'Removes a leg from a call',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'}
				]
			},
			{
				name:'holdCall',
				docs:'Puts all active legs on a call on hold. At least one leg must be active',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'}
				]
			},
			{
				name:'holdLeg',
				docs:'Puts a call leg on hold. The leg must be active',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'}
				]
			},
			{
				name:'muteCall',
				docs:'Mute all active legs on a call. At least one leg must be active.',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'}
				]
			},
			{
				name:'muteLeg',
				docs:'Mutes a call leg. The leg must be active.',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'}
				]
			},
			{
				name:'playMediaToCall',
				docs:'Play files and/or Text To Speech elements to a call. At least one leg must be active',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'announce',type:'xs:string',required:false,isArray:false,doc:'The Text to Speech culture to use, available from constants in this class'},
					{name:'play',type:'callPlayRequest',required:false,isArray:false,doc:'An object containing details of the recording request'}
				]
			},
			{
				name:'playMediaToCallLeg',
				docs:'Play files and/or Text To Speech elements to a call leg. The leg must be active',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'},
					{name:'announce',type:'xs:string',required:false,isArray:false,doc:'The Text to Speech culture to use, available from constants in this class'},
					{name:'play',type:'callPlayRequest',required:false,isArray:false,doc:'An object containing details of the recording request'}
				]
			},
			{
				name:'recordCall',
				docs:'Start recording a call. At least one leg must be active.',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'record',type:'callRecordRequest',required:false,isArray:false,doc:'An object containing details of the recording request'}
				]
			},
			{
				name:'recordCallLeg',
				docs:'Start recording a call leg. The leg must be active',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'},
					{name:'record',type:'callRecordRequest',required:false,isArray:false,doc:'An object containing details of the recording request'}
				]
			},
			{
				name:'requestDtmfFromCallLeg',
				docs:'Request DTMF digits collected from a call leg. The leg should be active before DTMF is requested',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'},
					{name:'requestDtmf',type:'callLegDtmfRequest',required:false,isArray:false,doc:'An object containing details of a request to collect DTMF input from a call leg'}
				]
			},
			{
				name:'stopPlayingMediaToCall',
				docs:'Stop playing files and/or Text To speech elements to a call',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'}
				]
			},
			{
				name:'stopPlayingMediaToCallLeg',
				docs:'Stop playing files and/or Text To speech elements to a call leg',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'}
				]
			},
			{
				name:'stopRecordingCall',
				docs:'Stop recording a call',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'}
				]
			},
			{
				name:'stopRecordingCallLeg',
				docs:'Stop recording a call leg',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'}
				]
			},
			{
				name:'unholdCall',
				docs:'Takes all active and held legs on a call off hold. At least one leg must be active',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'}
				]
			},
			{
				name:'unholdLeg',
				docs:'Takes a call leg off hold. The leg must be active',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'}
				]
			},
			{
				name:'unmuteCall',
				docs:'Take all active and muted legs on a call off mute. At least one leg must be active',
				uri:'calls/{userId}/{callId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'}
				]
			},
			{
				name:'unmuteLeg',
				docs:'Takes a call leg off mute. The leg must be active',
				uri:'calls/{userId}/{callId}/{legId}',
				httpMethod:'PUT',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'Unique numeric Call identifier'},
					{name:'legId',type:'xs:string',required:true,isArray:false,doc:'The call leg identifier'}
				]
			}
		]
	},
	{name:'Devices',
		methods:[
			{
				name:'createDevice',
				docs:'Registers a new device to the current User',
				uri:'devices/{userId}',
				httpMethod:'POST',
				params:[
					{name:'id',type:'xs:string',required:true,isArray:false,doc:'Unique Device identifier prefixed by schema to reflect device type (e.g. mailto:foo@bar.com)'},
					{name:'name',type:'xs:string',required:true,isArray:false,doc:'Name to refer to this Device'},
					{name:'label',type:'xs:string',required:false,isArray:false,doc:'A label for the Device'},
					{name:'callme',type:'xs:boolean',required:false,isArray:false,doc:'This Device can be used as an inbound \'CallMe\' number'},
					{name:'notifyvm',type:'xs:boolean',required:false,isArray:false,doc:'Send notifications to this Device on new voicemails'},
					{name:'callbackreachme',type:'xs:boolean',required:false,isArray:false,doc:'This Device can be used as \'reach me\' number'},
					{name:'mailtext',type:'xs:boolean',required:false,isArray:false,doc:'Include transcribed message content in notifications if available'},
					{name:'shared',type:'xs:boolean',required:false,isArray:false,doc:'This Device is shared by other people'},
					{name:'notifymissedcall',type:'xs:boolean',required:false,isArray:false,doc:'Send notifications to this device on missed calls'},
					{name:'showcalled',type:'xs:boolean',required:false,isArray:false,doc:'Show the callerID of the person called in the notification'},
					{name:'answersecurity',type:'xs:boolean',required:false,isArray:false,doc:''},
					{name:'notifytranscription',type:'xs:boolean',required:false,isArray:false,doc:'send notifications to this Device on new transcriptions'},
					{name:'attachmessage',type:'xs:boolean',required:false,isArray:false,doc:'Send voicemail file as an attachment to email notifications'},
					{name:'usewave',type:'xs:boolean',required:false,isArray:false,doc:'Send voicemail files in WAV format rather than MP3'},
					{name:'key',type:'xs:string',required:false,isArray:false,doc:'Security access code to enable this device'},
					{name:'ringstatus',type:'xs:boolean',required:false,isArray:false,doc:'Ring this Device when an inbound call arrives'},
					{name:'verifyBy',type:'xs:string',required:false,isArray:false,doc:'Populate with \'ccfTest\' to request a conditional call forwarding verification test'},
					{name:'autoAnswer',type:'xs:boolean',required:false,isArray:false,doc:'Automatically answer this inbound device'},
					{name:'allowCCF',type:'xs:boolean',required:false,isArray:false,doc:'Allow conditional call forwarding for this device'}
				 ]
			},
			{
				name:'createInboundNumber',
				docs:'Registers a new Inbound Number for the current User',
				uri:'devices/{userId}',
				httpMethod:'POST',
				params:[
					{name:'locale',type:'xs:string',required:true,isArray:false,doc:'A country code. Currently \'GBR\' and \'USA\' are supported, defaults to \'USA\''},
					{name:'name',type:'xs:string',required:true,isArray:false,doc:'Name to refer to this Device'}
				 ]
			},
			{
				name:'createInboundSmsNumber',
				docs:'Registers a new Inbound SMS Number for the current User',
				uri:'devices/{userId}',
				httpMethod:'POST',
				params:[
					{name:'locale',type:'xs:string',required:true,isArray:false,doc:'A country code. Currently \'GBR\' and \'USA\' are supported, defaults to \'USA\''},
					{name:'name',type:'xs:string',required:true,isArray:false,doc:'Name to refer to this Device'}
				 ]
			},
			{
				name:'createMailDevice',
				docs:'Registers a new mail device to the current User',
				uri:'devices/{userId}',
				httpMethod:'POST',
				params:[
					{name:'emailAddress',type:'xs:string',required:true,isArray:false,doc:'Email Address that will be prefixed by "mailto:" to form the Device Identifier'},
					{name:'name',type:'xs:string',required:true,isArray:false,doc:'Name to refer to this Device'}
				 ]
			},
			{
				name:'getDevice',
				docs:'Gets details about the Device',
				uri:'devices/{userId}/{deviceId}',
				httpMethod:'GET',
				params:[
					{name:'deviceId',type:'xs:string',required:true,isArray:false,doc:'Unique Device identifier prefixed by schema to reflect device type (e.g. mailto:foo@bar.com)'}
				 ]
			},
			{
				name:'getDevices',
				docs:'Get a collection of Devices belonging to the current User',
				uri:'devices/{userId}',
				httpMethod:'GET',
				params:[
				 ]
			},
			{
				name:'removeDevice',
				docs:'Deregisters a Device belonging to the current User',
				uri:'devices/{userId}/{deviceId}',
				httpMethod:'DELETE',
				params:[
					{name:'deviceId',type:'xs:string',required:true,isArray:false,doc:'Unique Device identifier prefixed by schema to reflect device type (e.g. mailto:foo@bar.com)'}
				 ]
			},
			{
				name:'updateDevice',
				docs:'Updates details about a Device, and flags which control how it interacts with the Ribbit Platform',
				uri:'devices/{userId}/{deviceId}',
				httpMethod:'PUT',
				params:[
					{name:'deviceId',type:'xs:string',required:true,isArray:false,doc:'Unique Device identifier prefixed by schema to reflect device type (e.g. mailto:foo@bar.com)'},
					{name:'name',type:'xs:string',required:false,isArray:false,doc:'Name to refer to this Device'},
					{name:'label',type:'xs:string',required:false,isArray:false,doc:'A label for the Device'},
					{name:'callme',type:'xs:boolean',required:false,isArray:false,doc:'This Device can be used as an inbound \'CallMe\' number'},
					{name:'notifyvm',type:'xs:boolean',required:false,isArray:false,doc:'Send notifications to this Device on new voicemails'},
					{name:'callbackreachme',type:'xs:boolean',required:false,isArray:false,doc:'This Device can be used as \'reach me\' number'},
					{name:'mailtext',type:'xs:boolean',required:false,isArray:false,doc:'Include transcribed message content in notifications if available'},
					{name:'shared',type:'xs:boolean',required:false,isArray:false,doc:'This Device is shared by other people'},
					{name:'notifymissedcall',type:'xs:boolean',required:false,isArray:false,doc:'Send notifications to this device on missed calls'},
					{name:'showcalled',type:'xs:boolean',required:false,isArray:false,doc:'Show the callerID of the person called in the notification'},
					{name:'answersecurity',type:'xs:boolean',required:false,isArray:false,doc:''},
					{name:'notifytranscription',type:'xs:boolean',required:false,isArray:false,doc:'send notifications to this Device on new transcriptions'},
					{name:'attachmessage',type:'xs:boolean',required:false,isArray:false,doc:'Send voicemail file as an attachment to email notifications'},
					{name:'usewave',type:'xs:boolean',required:false,isArray:false,doc:'Send voicemail files in WAV format rather than MP3'},
					{name:'key',type:'xs:string',required:false,isArray:false,doc:'Security access code to enable this device'},
					{name:'ringstatus',type:'xs:boolean',required:false,isArray:false,doc:'Ring this Device when an inbound call arrives'},
					{name:'verifyBy',type:'xs:string',required:false,isArray:false,doc:'Populate with \'ccfTest\' to request a conditional call forwarding verification test'},
					{name:'autoAnswer',type:'xs:boolean',required:false,isArray:false,doc:'Automatically answer this inbound device'},
					{name:'allowCCF',type:'xs:boolean',required:false,isArray:false,doc:'Allow conditional call forwarding for this device'}
				 ]
			},
			
			{
				name:'createInboundDevice',
				docs:'Registers a new inbound device to the current User',
				uri:'devices/{userId}',
				httpMethod:'POST',
				params:[
					{name:'id',type:'xs:string',required:true,isArray:false,doc:'Unique Device identifier prefixed by schema to reflect device type (e.g. mailto:foo@bar.com)'},
					{name:'name',type:'xs:string',required:true,isArray:false,doc:'Name to refer to this Device'}
				]
			},
			{
				name:'createOutboundDevice',
				docs:'Registers a new outbound device to the current User',
				uri:'devices/{userId}',
				httpMethod:'POST',
				params:[
					{name:'id',type:'xs:string',required:true,isArray:false,doc:'Unique Device identifier prefixed by schema to reflect device type (e.g. mailto:foo@bar.com)'},
					{name:'name',type:'xs:string',required:true,isArray:false,doc:'Name to refer to this Device'}
				]
			},
			{
				name:'requestConditionalCallForwardingTest',
				docs:'Request a conditional call forwarding verification test',
				uri:'devices/{userId}/{deviceId}',
				httpMethod:'PUT',
				params:[
					{name:'deviceId',type:'xs:string',required:true,isArray:false,doc:'Unique Device identifier prefixed by schema to reflect device type (e.g. mailto:foo@bar.com)'}
				]
			},
			{
				name:'setAutoAnswer',
				docs:'Configures a purpose number to be automatically answered by REST',
				uri:'devices/{userId}/{deviceId}',
				httpMethod:'PUT',
				params:[
					{name:'deviceId',type:'xs:string',required:true,isArray:false,doc:'Unique Device identifier prefixed by schema to reflect device type (e.g. mailto:foo@bar.com)'},
					{name:'autoAnswer',type:'xs:boolean',required:false,isArray:false,doc:'Automatically answer this inbound device'},
					{name:'allowCCF',type:'xs:boolean',required:false,isArray:false,doc:'Allow conditional call forwarding for this device'}
				]
			}
		]
	},
	{name:'Domains',
		methods:[
			{
				name:'getDomain',
				docs:'Gets a Domain',
				uri:'domains/{nameValue}',
				httpMethod:'GET',
				params:[
					{name:'name',type:'xs:string',required:true,isArray:false,doc:'A Domain Name'}
				 ]
			}
		]
	},
	{name:'Labels',
		methods:[
			{
				name:'getLabels',
				docs:'Gets a collection of Labels',
				uri:'labels/{userId}',
				httpMethod:'GET',
				params:[{name:'startIndex',isArray:false,doc:'the first result to return when requesting a paged list (optional)'},{name:'count',isArray:false,doc:'the number of results to return when requesting a paged list (required if a start index is supplied)'},{name:'filterBy',isArray:false,doc:'an key to an index with which to filter results (optional)'},{name:'filterValue',isArray:false,doc:'the value to search within the filter for (required if a filter is supplied)'}
				 ]
			}
		]
	},
	{name:'Media',
		methods:[
			{
				name:'createFolder',
				docs:'Creates a new virtual folder',
				uri:'media/{domainValue}',
				httpMethod:'POST',
				params:[
					{name:'id',type:'xs:string',required:true,isArray:false,doc:'An identifier for this access control list entry'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			},
			{
				name:'getFileAcl',
				docs:'Gets the access control list for a file',
				uri:'media/{domainValue}/{folder}/{file}/acl',
				httpMethod:'GET',
				params:[
					{name:'folder',type:'xs:string',required:true,isArray:false,doc:'The name of a folder within the domain on the server'},
					{name:'file',type:'xs:string',required:true,isArray:false,doc:'The name of a file within a folder on the server'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			},
			{
				name:'getFilesInFolder',
				docs:'',
				uri:'media/{domainValue}/{folder}',
				httpMethod:'GET',
				params:[
					{name:'folder',type:'xs:string',required:true,isArray:false,doc:'The name of a folder within the domain on the server'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'},{name:'startIndex',isArray:false,doc:'the first result to return when requesting a paged list (optional)'},{name:'count',isArray:false,doc:'the number of results to return when requesting a paged list (required if a start index is supplied)'},{name:'filterBy',isArray:false,doc:'an key to an index with which to filter results (optional)'},{name:'filterValue',isArray:false,doc:'the value to search within the filter for (required if a filter is supplied)'}
				 ]
			},
			{
				name:'getFolderAcl',
				docs:'Get the access control list for a folder',
				uri:'media/{domainValue}/{folder}/acl',
				httpMethod:'GET',
				params:[
					{name:'folder',type:'xs:string',required:true,isArray:false,doc:'The name of a folder within the domain on the server'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			},
			{
				name:'getTranscriptionForFile',
				docs:'',
				uri:'media/{domainValue}/{folder}/{file}.{serviceId}.txt',
				httpMethod:'GET',
				params:[
					{name:'folder',type:'xs:string',required:true,isArray:false,doc:'The name of a folder within the domain on the server'},
					{name:'file',type:'xs:string',required:true,isArray:false,doc:'The name of a file within a folder on the server'},
					{name:'serviceId',type:'xs:string',required:true,isArray:false,doc:''},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			},
			{
				name:'getUrlForMediaForCall',
				docs:'Creates a temporary URL that can be used for streaming files associated with a call',
				uri:'media/{domainValue}/call:{callId}/{callId}.mp3',
				httpMethod:'GETSTREAMABLEURL',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'A numeric call identifier'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			},
			{
				name:'removeAllMediaForCall',
				docs:'Removes all files associated with a call',
				uri:'media/{domainValue}/call:{callId}',
				httpMethod:'DELETE',
				params:[
					{name:'callId',type:'xs:string',required:true,isArray:false,doc:'A numeric call identifier'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			},
			{
				name:'removeFile',
				docs:'Removes a file',
				uri:'media/{domainValue}/{folder}/{file}',
				httpMethod:'DELETE',
				params:[
					{name:'folder',type:'xs:string',required:true,isArray:false,doc:'The name of a folder within the domain on the server'},
					{name:'file',type:'xs:string',required:true,isArray:false,doc:'The name of a file within a folder on the server'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			},
			{
				name:'removeFolder',
				docs:'Removes a folder, and all it\'s contents',
				uri:'media/{domainValue}/{folder}',
				httpMethod:'DELETE',
				params:[
					{name:'folder',type:'xs:string',required:true,isArray:false,doc:'The name of a folder within the domain on the server'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			},
			{
				name:'updateFileAcl',
				docs:'Updates the access control list for a file',
				uri:'media/{domainValue}/{folder}/{file}/acl',
				httpMethod:'PUT',
				params:[
					{name:'folder',type:'xs:string',required:true,isArray:false,doc:'The name of a folder within the domain on the server'},
					{name:'file',type:'xs:string',required:true,isArray:false,doc:'The name of a file within a folder on the server'},
					{name:'readUsers',type:'xs:string',required:false,isArray:true,doc:'An array of User GUIDS who have permission to read the resource'},
					{name:'writeUsers',type:'xs:string',required:false,isArray:true,doc:'An array of Users GUIDS who have permission to write to the resource'},
					{name:'readApps',type:'xs:string',required:false,isArray:true,doc:'An array of Application GUIDS who have permission to read the resource'},
					{name:'writeApps',type:'xs:string',required:false,isArray:true,doc:'An array of Application GUIDS who have permission to write to the resource'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			},
			{
				name:'updateFolderAcl',
				docs:'Updates the access control list for a folder',
				uri:'media/{domainValue}/{folder}/acl',
				httpMethod:'PUT',
				params:[
					{name:'folder',type:'xs:string',required:true,isArray:false,doc:'The name of a folder within the domain on the server'},
					{name:'readUsers',type:'xs:string',required:false,isArray:true,doc:'An array of User GUIDS who have permission to read the resource'},
					{name:'writeUsers',type:'xs:string',required:false,isArray:true,doc:'An array of Users GUIDS who have permission to write to the resource'},
					{name:'readApps',type:'xs:string',required:false,isArray:true,doc:'An array of Application GUIDS who have permission to read the resource'},
					{name:'writeApps',type:'xs:string',required:false,isArray:true,doc:'An array of Application GUIDS who have permission to write to the resource'},
					{name:'domain',type:'xs:string',required:true,isArray:false,doc:'A domain name, normally the current users'}
				 ]
			}
		]
	},
	{name:'Messages',
		methods:[
			{
				name:'createMessage',
				docs:'To send an SMS the recipients in the array must be formatted tel:xxnnnnnn where xx is a country code and nnnnnn is their phone number.<br/>When sending a SMS the sender must also be a tel:xxnnnnn uri, and a telephone number registered to the current User on the Ribbit Platform, either an allocated inbound (purpose) number or a cell phone. <br/>The body will be the content that gets displayed on the phone. <br/>The title is sometimes referred to as the message id, and some cellular devices and carriers make this available.',
				uri:'messages/{userId}/outbox',
				httpMethod:'POST',
				params:[
					{name:'recipients',type:'xs:string',required:true,isArray:true,doc:'A list of details about the recipients of the Message'},
					{name:'body',type:'xs:string',required:true,isArray:false,doc:'The body of the Message'},
					{name:'sender',type:'xs:string',required:false,isArray:false,doc:'The device ID that sent the Message'},
					{name:'title',type:'xs:string',required:false,isArray:false,doc:'The title of the Message'}
				 ]
			},
			{
				name:'getMessage',
				docs:'Gets details of a message in a folder',
				uri:'messages/{userId}/{folder}/{messageId}',
				httpMethod:'GET',
				params:[
					{name:'messageId',type:'xs:string',required:true,isArray:false,doc:'A message identifier'},
					{name:'folder',type:'xs:string',required:true,isArray:false,doc:'A folder that contains messages'}
				 ]
			},
			{
				name:'getMessages',
				docs:'Gets a collection of details of messages associated with the current User. This method supports pagination and filtering, both separately and in combination',
				uri:'messages/{userId}',
				httpMethod:'GET',
				params:[{name:'startIndex',isArray:false,doc:'the first result to return when requesting a paged list (optional)'},{name:'count',isArray:false,doc:'the number of results to return when requesting a paged list (required if a start index is supplied)'},{name:'filterBy',isArray:false,doc:'an key to an index with which to filter results (optional)'},{name:'filterValue',isArray:false,doc:'the value to search within the filter for (required if a filter is supplied)'}
				 ]
			},
			{
				name:'getMessagesFilteredByStatus',
				docs:'Get a list of messages filtered by status. Values are \'delivered\', \'received\' and \'failed\'',
				uri:'messages/{userId}',
				httpMethod:'GET',
				params:[
					{name:'status',type:'xs:string',required:true,isArray:false,doc:'The value which represents the delivery status, to this recipient, of the Message'}
				 ]
			},
			{
				name:'getMessagesFilteredByTag',
				docs:'Get a list of messages filtered by a tag',
				uri:'messages/{userId}',
				httpMethod:'GET',
				params:[
					{name:'tag',type:'xs:string',required:true,isArray:false,doc:''}
				 ]
			},
			{
				name:'getNewMessages',
				docs:'',
				uri:'messages/{userId}',
				httpMethod:'GET',
				params:[
				 ]
			},
			{
				name:'getReceivedMessages',
				docs:'Gets a collection of details of messages received by the current User. This method supports pagination',
				uri:'messages/{userId}/inbox',
				httpMethod:'GET',
				params:[{name:'startIndex',isArray:false,doc:'the first result to return when requesting a paged list (optional)'},{name:'count',isArray:false,doc:'the number of results to return when requesting a paged list (required if a start index is supplied)'}
				 ]
			},
			{
				name:'getSentMessages',
				docs:'Gets a collection of details of messages sent by the current User. This method supports pagination',
				uri:'messages/{userId}/sent',
				httpMethod:'GET',
				params:[{name:'startIndex',isArray:false,doc:'the first result to return when requesting a paged list (optional)'},{name:'count',isArray:false,doc:'the number of results to return when requesting a paged list (required if a start index is supplied)'}
				 ]
			},
			{
				name:'updateMessage',
				docs:'Update a message. Move it to a folder or flag it',
				uri:'messages/{userId}/{folder}/{messageId}',
				httpMethod:'PUT',
				params:[
					{name:'messageId',type:'xs:string',required:true,isArray:false,doc:'A message identifier'},
					{name:'folder',type:'xs:string',required:false,isArray:false,doc:'A folder that contains messages'},
					{name:'newMessage',type:'xs:boolean',required:false,isArray:false,doc:'Whether the message is flagged as \'new\''},
					{name:'urgent',type:'xs:boolean',required:false,isArray:false,doc:'Whether the message is flagged as \'urgent\''},
					{name:'newFolder',type:'xs:string',required:false,isArray:false,doc:'A folder that contains messages'}
				 ]
			},
			
			{
				name:'deleteMessage',
				docs:'',
				uri:'messages/{userId}/{folder}/{messageId}',
				httpMethod:'PUT',
				params:[
					{name:'messageId',type:'xs:string',required:true,isArray:false,doc:'A message identifier'},
					{name:'folder',type:'xs:string',required:false,isArray:false,doc:'A folder that contains messages'}
				]
			},
			{
				name:'getReceivedMessage',
				docs:'Gets details of a sent message',
				uri:'messages/{userId}/{folder}/{messageId}',
				httpMethod:'GET',
				params:[
					{name:'messageId',type:'xs:string',required:true,isArray:false,doc:'A message identifier'}
				]
			},
			{
				name:'getSentMessage',
				docs:'Gets details of a message sent by the current User',
				uri:'messages/{userId}/{folder}/{messageId}',
				httpMethod:'GET',
				params:[
					{name:'messageId',type:'xs:string',required:true,isArray:false,doc:'A message identifier'}
				]
			},
			{
				name:'markMessageNew',
				docs:'Flag a message as \'new\'',
				uri:'messages/{userId}/{folder}/{messageId}',
				httpMethod:'PUT',
				params:[
					{name:'messageId',type:'xs:string',required:true,isArray:false,doc:'A message identifier'},
					{name:'folder',type:'xs:string',required:false,isArray:false,doc:'A folder that contains messages'}
				]
			},
			{
				name:'markMessageNotUrgent',
				docs:'',
				uri:'messages/{userId}/{folder}/{messageId}',
				httpMethod:'PUT',
				params:[
					{name:'messageId',type:'xs:string',required:true,isArray:false,doc:'A message identifier'},
					{name:'folder',type:'xs:string',required:false,isArray:false,doc:'A folder that contains messages'}
				]
			},
			{
				name:'markMessageRead',
				docs:'',
				uri:'messages/{userId}/{folder}/{messageId}',
				httpMethod:'PUT',
				params:[
					{name:'messageId',type:'xs:string',required:true,isArray:false,doc:'A message identifier'},
					{name:'folder',type:'xs:string',required:false,isArray:false,doc:'A folder that contains messages'}
				]
			},
			{
				name:'markMessageUrgent',
				docs:'Flag a message as \'urgent\'',
				uri:'messages/{userId}/{folder}/{messageId}',
				httpMethod:'PUT',
				params:[
					{name:'messageId',type:'xs:string',required:true,isArray:false,doc:'A message identifier'},
					{name:'folder',type:'xs:string',required:false,isArray:false,doc:'A folder that contains messages'}
				]
			}
		]
	},
	{name:'Services',
		methods:[
			{
				name:'getServices',
				docs:'',
				uri:'services/{userId}',
				httpMethod:'GET',
				params:[
				 ]
			}
		]
	},
	{name:'Tokens',
		methods:[
			{
				name:'createToken',
				docs:'Create a new Token. It is possible to specify the number of concurrent callers, and limit the token to operate only between certain dates.',
				uri:'tokens',
				httpMethod:'POST',
				params:[
					{name:'type',type:'xs:string',required:true,isArray:false,doc:'The type of token (\'uphone\' for YouPhone Tokens)'},
					{name:'callee',type:'xs:string',required:true,isArray:false,doc:'A Device URI that represents the number or address called (eg tel:xxnnnnnnnn)'},
					{name:'caller',type:'xs:string',required:true,isArray:false,doc:'A Device URI that represents the number or address used as caller ID (eg tel:xxnnnnnnnn)'},
					{name:'description',type:'xs:string',required:true,isArray:false,doc:'A textual description of the Token'},
					{name:'startDate',type:'xs:dateTime',required:false,isArray:false,doc:'The date before which the Token is invalid'},
					{name:'endDate',type:'xs:dateTime',required:false,isArray:false,doc:'The date after which the token is invalid'},
					{name:'maxConcurrent',type:'xs:int',required:false,isArray:false,doc:'The maximum number of concurrent connections using this token'}
				 ]
			},
			{
				name:'getToken',
				docs:'Retrieve the details of a Token that belongs to the current User',
				uri:'tokens/{userId}/{tokenId}',
				httpMethod:'GET',
				params:[
					{name:'tokenId',type:'xs:string',required:true,isArray:false,doc:'A Token identifier'}
				 ]
			},
			{
				name:'getTokens',
				docs:'Retrieve a list of details about Tokens that belong to the current User. This method supports pagination',
				uri:'tokens/{userId}',
				httpMethod:'GET',
				params:[
				 ]
			},
			{
				name:'removeToken',
				docs:'Remove a Token that belongs to the current User',
				uri:'tokens/{userId}/{tokenId}',
				httpMethod:'DELETE',
				params:[
					{name:'tokenId',type:'xs:string',required:true,isArray:false,doc:'A Token identifier'}
				 ]
			},
			
			{
				name:'createYouPhoneToken',
				docs:'Creates a new YouPhone Token',
				uri:'tokens',
				httpMethod:'POST',
				params:[
					{name:'callee',type:'xs:string',required:true,isArray:false,doc:'A Device URI that represents the number or address called (eg tel:xxnnnnnnnn)'},
					{name:'caller',type:'xs:string',required:true,isArray:false,doc:'A Device URI that represents the number or address used as caller ID (eg tel:xxnnnnnnnn)'},
					{name:'description',type:'xs:string',required:true,isArray:false,doc:'A textual description of the Token'},
					{name:'startDate',type:'xs:dateTime',required:false,isArray:false,doc:'The date before which the Token is invalid'},
					{name:'endDate',type:'xs:dateTime',required:false,isArray:false,doc:'The date after which the token is invalid'},
					{name:'maxConcurrent',type:'xs:int',required:false,isArray:false,doc:'The maximum number of concurrent connections using this token'}
				]
			}
		]
	},
	{name:'Users',
		methods:[
			{
				name:'createUser',
				docs:'Create a new user',
				uri:'users',
				httpMethod:'POST',
				params:[
					{name:'login',type:'xs:string',required:true,isArray:false,doc:'User login (e.g. foo@bar.com), unique within a domain'},
					{name:'password',type:'xs:string',required:true,isArray:false,doc:'A Password for the User.'},
					{name:'firstName',type:'xs:string',required:false,isArray:false,doc:'Non-unique name to refer to User.'},
					{name:'lastName',type:'xs:string',required:false,isArray:false,doc:'Non-unique name to refer to User.'},
					{name:'accountId',type:'xs:long',required:false,isArray:false,doc:'The billing account ID used by this user, this must refer to a valid account in order for the user to conduct billable activity such as making calls, requesting purpose numbers etc. The account ID may be updated for a given user if and only if the authorized user making the request is the owner of the billing account or else the account ID is the same as the billing account ID used by the developer that "owns" the application making the request.'},
					{name:'domain',type:'xs:string',required:false,isArray:false,doc:'The Domain to which the User belongs.'}
				 ]
			},
			{
				name:'getUser',
				docs:'Get User details',
				uri:'users/{userId}',
				httpMethod:'GET',
				params:[
					{name:'userId',type:'xs:string',required:true,isArray:false,doc:'Globally unique User identifier (GUID)'}
				 ]
			},
			{
				name:'getUsers',
				docs:'Get Users in the current domain',
				uri:'users',
				httpMethod:'GET',
				params:[{name:'startIndex',isArray:false,doc:'the first result to return when requesting a paged list (optional)'},{name:'count',isArray:false,doc:'the number of results to return when requesting a paged list (required if a start index is supplied)'},{name:'filterBy',isArray:false,doc:'an key to an index with which to filter results (optional)'},{name:'filterValue',isArray:false,doc:'the value to search within the filter for (required if a filter is supplied)'}
				 ]
			},
			{
				name:'getUsersFilteredByLogin',
				docs:'Gets an array of User details, filtered by the supplied login parameter',
				uri:'users',
				httpMethod:'GET',
				params:[
					{name:'login',type:'xs:string',required:true,isArray:false,doc:'User login (e.g. foo@bar.com), unique within a domain'}
				 ]
			},
			{
				name:'requestPasswordReset',
				docs:'Requests a password reset for a user. This method is not compatible with 2 legged authentication, where a secret key is NOT supplied',
				uri:'users/{userId}',
				httpMethod:'PUT',
				params:[
					{name:'userId',type:'xs:string',required:true,isArray:false,doc:'Globally unique User identifier (GUID)'},
					{name:'pwdStatus',type:'xs:string',required:true,isArray:false,doc:'Set to \'reset\' to have a new password sent to the User\'s email.'}
				 ]
			},
			{
				name:'updateUser',
				docs:'Update a users details, for example, change their billing account or reset their password',
				uri:'users/{userId}',
				httpMethod:'PUT',
				params:[
					{name:'login',type:'xs:string',required:false,isArray:false,doc:'User login (e.g. foo@bar.com), unique within a domain'},
					{name:'password',type:'xs:string',required:false,isArray:false,doc:'A Password for the User.'},
					{name:'firstName',type:'xs:string',required:false,isArray:false,doc:'Non-unique name to refer to User.'},
					{name:'lastName',type:'xs:string',required:false,isArray:false,doc:'Non-unique name to refer to User.'},
					{name:'pwdStatus',type:'xs:string',required:false,isArray:false,doc:'Set to \'reset\' to have a new password sent to the User\'s email.'},
					{name:'accountId',type:'xs:long',required:false,isArray:false,doc:'The billing account ID used by this user, this must refer to a valid account in order for the user to conduct billable activity such as making calls, requesting purpose numbers etc. The account ID may be updated for a given user if and only if the authorized user making the request is the owner of the billing account or else the account ID is the same as the billing account ID used by the developer that "owns" the application making the request.'},
					{name:'domain',type:'xs:string',required:false,isArray:false,doc:'The Domain to which the User belongs.'}
				 ]
			}
		]
	}],
objects:[
		 {name:'callPlayRequest',
			 docs:'',
			 	params:[
				{name:'media',type:'callPlayMedia',required:false,isArray:true,doc:'A collection of files and/or Text To Speech elements'}
				,
				{name:'transactionId',type:'xs:string',required:false,isArray:false,doc:'A transaction identifier'}
				,
				{name:'stoptones',type:'xs:string',required:false,isArray:false,doc:'Stop playing media when a keypad digit, or digits, are pressed'}
				,
				{name:'flush',type:'xs:boolean',required:true,isArray:false,doc:'Set this to true to disregard any keypresses prior to audio being played'}
				
				 ]
			},
		 {name:'callPlayMedia',
			 docs:'',
			 	params:[
				{name:'type',type:'xs:string',required:true,isArray:false,doc:'The type of media to play, available in constants. For example, use "file" to play a file, or "string" to say an arbitrary string'}
				,
				{name:'value',type:'xs:string',required:true,isArray:false,doc:'Either a URI to a file already saved on the Ribbit Platform, or a value to be said by the Text To Speech Engine'}
				,
				{name:'offset',type:'xs:int',required:true,isArray:false,doc:'The position in the file to start playing. Usually 0'}
				,
				{name:'duration',type:'xs:int',required:true,isArray:false,doc:'The length of the file to play. Set to -1 to play the entire file'}
				
				 ]
			},
		 {name:'callRecordRequest',
			 docs:'',
			 	params:[
				{name:'file',type:'xs:string',required:true,isArray:false,doc:'The file to record to, a relative URI such as media/domain/myfolder/recording.mp3'}
				,
				{name:'append',type:'xs:boolean',required:false,isArray:false,doc:'Set to true to append the recording to an existing file'}
				,
				{name:'flush',type:'xs:boolean',required:true,isArray:false,doc:'Set this to true to disregard any keypresses prior to audio being played'}
				,
				{name:'duration',type:'xs:int',required:false,isArray:false,doc:'The length of the recording to make, in seconds'}
				,
				{name:'stoptones',type:'xs:string',required:false,isArray:false,doc:'Stop recording when a keypad digit, or digits, are pressed'}
				
				 ]
			},
		 {name:'callLegDtmfRequest',
			 docs:'',
			 	params:[
				{name:'flush',type:'xs:boolean',required:true,isArray:false,doc:'Set this to true to disregard any keypresses prior to audio being played'}
				,
				{name:'maxDigits',type:'xs:int',required:true,isArray:false,doc:'The maximum number of key presses to collect'}
				,
				{name:'stoptones',type:'xs:string',required:false,isArray:false,doc:'Stop recording when a keypad digit, or digits, are pressed'}
				,
				{name:'timeOut',type:'xs:int',required:true,isArray:false,doc:'The number of milliseconds after which the service should stop collecting digits'}
				,
				{name:'maxInterval',type:'xs:int',required:true,isArray:false,doc:'The maximum length of time (in milliseconds) to wait between keypresses without stopping digit collection'}
				
				 ]
			}]}