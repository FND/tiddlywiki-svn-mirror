modifier: None
created: 20091020224726
modified: 20091020224726
type: None
title: VGraphPlugin
tags: systemConfig


try{
  config.shadowTiddlers.VGraphStyle = "/*{{{*/\n" +
  ".changeAlgorithm {z-index:10;position:absolute;right:0px;bottom:0px;}\n"+
  ".VGraph {height:400px;width:800px;}\n"+
  "/*}}}*/"
store.addNotification("VGraphStyle", refreshStyles);
}catch(e){};

config.macros.VGraph= {
    
    handler: function(place,macroName,params,wikifier,paramString,tiddler,options){
        /*setup options */
        
        if(jQuery(place).hasClass("viewer")){
            var div = document.createElement("div");
               place.className = "VGraph"
               place.appendChild(div);
               var w = jQuery(place).width();
               var h = jQuery(place).height();
               if(!w) w = 700;
               if(!h) h= 300;
               jQuery(div).css({width:w,height:h,"position":"relative"});
               place = div;
        }
       
        var nodes = store.getTiddlers();
        if(!options){
            options = {};
        }
        
        merge(options,{nodeWidth:20,nodeHeight:10,defaultNodeColor:"rgb(200,200,200)",lineColor:"rgb(200,200,200)",lineWidth:"2"});
        
        if(!paramString)paramString = "";
        var namedprms = paramString.parseParams(null, null, true);
        for(var i=0; i < namedprms.length;i++){
            var nameval = namedprms[i];
            options[nameval.name] = nameval.value;
            
        }
        if(!options.lineType){
            options.lineType = 'bezier';
        }
        if(!options.parentFields) {
            options.parentFields = ["father","mother"];
        }
        
        if(!options.excludeTags){
            options.excludeTags =[];
        }
        if(!options.styleNode){
            options.styleNode = function(tiddler,json){
                json.properties.label = json.id;
            }
        }
        if(options.labelMacro && config.macros[options.labelMacro]){
            options.plotNode = function(el,shape){
                var tiddler =store.getTiddler(shape.properties.id);
                if(!tiddler)tiddler = {title:shape.properties.id,tags:[],fields:{}};
                tiddler.vismoShape = shape;
                config.macros[options.labelMacro].handler(el,false,false,false,false,tiddler);
            }
        }
   
        if(!options.root){
            options.root = "_VGraphBridge_";
            options.connectOrphans = true;
        }
        var graph = this.constructGraph(nodes,options);
        options.graph = graph;
        

        

        if(!options.algorithm)options.algorithm = "walkers";

        var vgr =  this.setup(place,options);
        
       
        config.macros.VGraph.algorithmDropdown(place,vgr,vgr.options.algorithm);
        
        return vgr;
    }
    
    ,algorithmDropdown: function(place,vgr,selected){
        var that = this;
        var algorithmStr = "<select class='changeAlgorithm'><option value='-1'>change layout algorithm</option>";
        var algs =VismoGraphAlgorithms.available();
       
        for(var i=0;i < algs.length; i++){
            var alg_id = algs[i];
            var alg = VismoGraphAlgorithms[alg_id];
            var selectStr = "";
            if(selected == alg_id){
                selectStr = " selected";
            }
            if(alg.name){
                algorithmStr += "<option value='"+alg_id+"'"+selectStr+">"+alg.name+"</option>";
            }
        }
        algorithmStr += "</select>";
        
        jQuery(place).append(algorithmStr);
        jQuery(".changeAlgorithm",place).change(function(e){
           if(this.value == "-1") return;
           
            vgr.algorithm(this.value);
            vgr.clear();
            vgr.compute();
        });
    }
    
    
    ,makeNode: function(id,options){
        var json={id:id,properties:{name:id}};
        var tiddler = store.getTiddler(id);
        if(!tiddler) tiddler = {title:id,fields:{},tags:[]};
        if(options.styleNode)options.styleNode(tiddler,json);
        return json;
    }
    ,constructGraph: function(tiddlers,options){
        var parentFields =options.parentFields;
        var ignoreTags = options.excludeTags;
        var prepNode = options.styleNode;
        var n = [];
        var edges = [];
        var tempnodes = {};
        
        if(options.connectOrphans){
            var bridgeNode = "_VGraphBridge_";
            tempnodes[bridgeNode] = this.makeNode(bridgeNode,options);
            tempnodes[bridgeNode].properties.hidden= true;
        }
        var anOrphan = {};
        for(var i=0; i< tiddlers.length; i++){
            var node = tiddlers[i];
            var id1 = node.title;

            var tags = node.tags;
            
            if(this._includeTiddlerInGraph(node,ignoreTags)){ 
              if(!tempnodes[id1])tempnodes[id1] = this.makeNode(id1,options);
              /*define parents of that tiddler */
              for(var j=0; j < parentFields.length; j++){
                var field = parentFields[j];
                var isOrphan = true;
                //console.log(field);
                if(field == 'tags'){
                    
                    for(var k=0; k < node.tags.length; k++){ 
                       var tag = node.tags[k];
                        
                       if(!tempnodes[tag])tempnodes[tag] =this.makeNode(tag,options);
                       edges.push([tag,id1]);
                       isOrphan = false;
                       var tagTiddler = store.getTiddler(tag);
                       if(!tagTiddler && !anOrphan[tag]){
                           edges.push(["_VGraphBridge_",tag]);
                           anOrphan[tag] = true;
                       }
                    }
                }
                else if(node[field]) {
                    edges.push([node[field],id1]);
                    isOrphan = false;
                }
                else if(node.fields[field]){
                    edges.push([node.fields[field],id1]);
                    isOrphan = false;
                }
                
                if(isOrphan && options.connectOrphans){
                    edges.push(["_VGraphBridge_",id1]);
                }
              }

            }
        }

        for(var l in tempnodes){
            n.push(tempnodes[l]);
        }
        //console.log(tempnodes,n,edges);
        var graph = new VismoGraph({nodes:n,edges:edges});
        return graph;
    }
    ,setup: function(place,options){
        this.options = options;
        this.setuptooltip(place);
        var that = this;
        options.dblclick = function(e,s){if(!s)return;story.displayTiddler(null,s.properties.name);};
       
        this.options.vismoController = {labels:true,controlFill:options.lineColor,controlShape: "circle",controlStroke:"rgb(255,255,255)"};
       
        this.vgr = new VismoGraphRenderer(place,options);
       
        return this.vgr;
    }
    ,graph: function(){
        return this.vgr.graph();
    }
    ,setuptooltip: function(place){
        
        var tooltip = document.createElement("div");
        tooltip.className = "ft_tooltip";
        place.appendChild(tooltip);
        jQuery(tooltip).css({position:"absolute",display:"none"});
        
        var that = this;
        this.options.move = function(e,s){ jQuery(tooltip).css({display:"none"});if(s){var bb = s.getBoundingBox();jQuery(tooltip).text(s.getProperty("name"));jQuery(tooltip).css({top:e.screenY - e.clientY,left:0,display:""});}};
        
        
        
    }

    ,_includeTiddlerInGraph: function(tiddler,ignoreTags){
        for(var i=0; i < ignoreTags.length; i++){
            var tag = ignoreTags[i];
            if(tiddler.tags.indexOf(tag) != -1) return false;
        }
        return true;
    }
};
