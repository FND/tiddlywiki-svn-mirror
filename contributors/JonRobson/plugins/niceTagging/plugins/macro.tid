tags: systemConfig
title: NiceTaggingPlugin

/***
|''Name:''| NiceTaggingPlugin|
|''Description:''| creates a nicer interface for adding and removing TiddlyWiki. Ideal for tiddly novices. |
|''Version:''|0.5|
|''Date:''|8 September 2009|
|''Source:''|http://www.jonrobson.me.uk/development/niceTagging|
|''Author:''|Jon Robson|
|''License:''|[[BSD open source license]]|
|''CoreVersion:''|2.3|
|''Dependencies:''||
***/

if(store){
  config.shadowTiddlers.NiceTaggingStyle = "/*{{{*/\n" +
  ".tip {font-style:italic;font-weight:bold;}\n"+
  ".dp-popup {position:absolute;background-color:white;} a.dp-choose-date {	float: left;	width: 16px;	height: 16px;	padding: 0;	margin: 5px 3px 0;	display: block;	text-indent: -2000px;	overflow: hidden;	background: url(calendar.png) no-repeat; }a.dp-choose-date.dp-disabled {	background-position: 0 -20px;	cursor: default;}input.dp-applied {	width: 140px;	float: left;}\n"+
  ".niceTagger input {width:200px; float:left;}\n"+
  ".deleter {color:red; font-weight:bold; padding:2px; cursor:pointer;}\n"+
  "/*}}}*/";
store.addNotification("NiceTaggingStyle", refreshStyles);
}


config.macros.niceTagger = {
	lingo:{
		add: "add"
	}
	,twtags: {}
	,initialised:{}
	,init: function(field){
	    
	    if(!field)field = 'tags';

	    if(this.initialised[field]){
	        if(field =='tags'){
	            
    	        var numTags= store.getTags();
    	        if(numTags.length == this.twtags[field].length) return;
    	    }
    	    else{
    	        return;
	        }
	    }
	    var tiddlers= store.getTiddlers();
	    config.macros.niceTagger.twtags[field] = [];
	    
        for(var i=0; i < tiddlers.length; i++){
            var dest = config.macros.niceTagger.twtags[field];
            var tid = tiddlers[i];
        	var values;
        	if(field=='tags')values = tid.tags;
        	else {
        	    values=tid.fields[field]
        	    if(!values)values="";
        	    values = values.readBracketedList();
        	}
        	config.macros.niceTagger.twtags[field]= dest.concat(values);
        }
        this.initialised[field] =true;
	}
  ,save: function(title,field,list,place){
        //console.log("save",title,field,list);
		var tiddler =  store.getTiddler(title);
		if(!tiddler) { //doesnt work when tiddler is brand spanking new
		  var dummytiddler ={title:title,tags:[],fields:{}};
		    var tagTempPlace = jQuery("input[edit="+field+"]",place);

		    if(!tagTempPlace[0]){
		      jQuery(place).append('<input style="display:none;" type="text" edit="'+field+'"/>')
		    }
		    tagTempPlace = jQuery("input[edit="+field+"]",place);
		    
		    var tags = [];
		    if(field=='tags'){
		        tags = list;
		        dummytiddler.tags = list;
		    }
		    else{
		        dummytiddler.fields[field] = list;
		    }
		    tagTempPlace.val(String.encodeTiddlyLinkList(list))
		  return dummytiddler;
			//store.saveTiddler(title,title,null,true,null,tags,fields,null);
			//tiddler =  store.getTiddler(title);
		}
		
		var strVal;
		if(typeof(list) =='string'){
		    strVal = list;
		}
		else{
		    strVal= String.encodeTiddlyLinkList(list);
		} 
		//tiddler.fields[field] = strVal
		//store.saveTiddler(tiddler.title,tiddler.title,tiddler.text,null,null,tiddler.tags,tiddler.fields,null);
		store.setValue(tiddler.title,field,strVal);
		     store.saveTiddler(tiddler.title, tiddler.title, tiddler.text, tiddler.modifier, tiddler.modified, tiddler.tags, tiddler.fields, false, tiddler.created)
          autoSaveChanges()
          
		//story.setDirty(title,true);
		return tiddler;
        //console.log("finished save tags",tiddler.tags,"field",tiddler.fields[field]);
    }
    ,refreshFieldDisplay: function(place,tiddler,field){
        //console.log("refresh tasgs",field,tiddler.fields[field]);
        jQuery(place).html("");
        var tags;
        if(!field ||field=='tags'){
            tags = tiddler.tags;
        }
        else{
            var val= tiddler.fields[field];
            if(!val)val="";
            tags = val.readBracketedList();
        }
        for(var t=0; t < tags.length; t++){
            var tag = tags[t];
            jQuery(place).append(" <span class='tag'>"+tag+"</span> <span class='deleter' deletes='"+escape(tag)+"'>x</span>");
        }
        
        jQuery(".deleter",place).click(function(e){
            //console.log("gonna delete");
            var todelete = jQuery(this).attr("deletes");
            var newtags = [];
            //console.log("delete",todelete);
            for(var i=0; i < tags.length; i++){
                if(escape(tags[i]) != todelete){
                   newtags.push(tags[i]);
                }
            }
            //console.log("Save",tiddler.title,field,newtags);
            tiddler = config.macros.niceTagger.save(tiddler.title,field,newtags,place);
            //console.log("Refresh",tiddler,field);
            config.macros.niceTagger.refreshFieldDisplay(place,tiddler,field);
       
            //console.log("done refresh")
        });
    }
    ,handler: function(place,macroName,paramlist,wikifier,paramString,tiddler){
          var options = {};
            var namedprms = paramString.parseParams(null, null, true);
            for(var i=0; i < namedprms.length;i++){
                var nameval = namedprms[i];
                options[nameval.name] = nameval.value;
            }
        if(!options.field)options.field = "tags";
        
        this.init(options.field);
        var displayer = document.createElement("div");
        displayer.className = "niceTagger";
        place.appendChild(displayer);
        config.macros.niceTagger.refreshFieldDisplay(displayer,tiddler,options.field);
        var tagplace = document.createElement("div");
        tagplace.className ="niceTaggerAdder"
        place.appendChild(tagplace);
        var saveNewTag= function(value){
            var saveThis = [];
            if(options.field=='tags'){
                saveThis = tiddler.tags;
            }
            else{
                var val = tiddler.fields[options.field];
                if(!val)val= "";
                saveThis = val.readBracketedList();
            }
            
            if(value.replace(" ","").length == 0) return;
            if(saveThis.indexOf(value) != -1) return;
            saveThis.push(value);
            
            tiddler= config.macros.niceTagger.save(tiddler.title,options.field,saveThis,place);
            
            config.macros.niceTagger.refreshFieldDisplay(displayer,tiddler,options.field);
            adder.value = "";
       
            
        };
        var adder;
        if(config.macros.AdvancedEditTemplate){
            //config.macros.AdvancedEditTemplate.handler(tagplace,null,null,null,"aet type:search metaDataName:assignby valuesSource:Suggestions");
             var params = paramString.parseParams("anon",null,true,false,false);
			 var textcase = getParam(params,"case");
            var srcTiddler = getParam(params,"valuesSource");
            var suggestions = [];
            if(srcTiddler){
                var text = store.getTiddler(srcTiddler).text;
                var tempdiv = document.createElement("div");
                wikify(text,tempdiv);
                suggestions = jQuery(tempdiv).html().split("<br>");
            }
            if(textcase && textcase == "lower"){
              for(var i=0; i < suggestions.length;i++){
                suggestions[i] =suggestions[i].toLowerCase();
              }
            }
		var tagsoff = getParam(params,"nostoretags");
		if(!tagsoff) suggestions = suggestions.concat(config.macros.niceTagger.twtags[options.field]);
		
		
		var uniqueSuggestions = [];
		var ignoreList = paramString.parseParams("exclude",null,true,false,true);

		if(ignoreList && ignoreList[0] && ignoreList[0]["exclude"]) ignoreList =  ignoreList[0]["exclude"];
		else ignoreList = ["excludeList"];
		for(var i=0; i < suggestions.length; i++){
			var s =suggestions[i];
			if(s && typeof(s) =='string'){
			//rtrim then ltrim
			  s = s.replace(new RegExp("[\\s]+$", "g"), "").replace(new RegExp("^[\\s]+", "g"), "");
			//console.log(uniqueSuggestions.toString(),s,uniqueSuggestions.indexOf(s));
				if(uniqueSuggestions.indexOf(s) ==-1 && ignoreList.indexOf(s) ==-1){
					uniqueSuggestions.push(s);
				}
			}
		}
		//console.log(uniqueSuggestions);
           config.macros.AdvancedEditTemplate.createSearchBox(tagplace,"tags",uniqueSuggestions,"",function(v){saveNewTag(v);jQuery("input",tagplace).val("");})
           adder = jQuery("input",tagplace)[0];
			
		
        }
        else{
            adder = document.createElement("input");

            tagplace.appendChild(adder);
            
        }
		jQuery(adder).keypress(function (e) {
			if(e.which == 13){
				var results = jQuery(".ac_over",".ac_results"); //is anything highlighted in autocomplete plugin
				if(results.length ==0)
		
					saveNewTag(adder.value);
			}
		});
        var addbutton = document.createElement("button");
        addbutton.innerHTML = config.macros.niceTagger.lingo.add;
		addbutton.className = "adder";
        tagplace.appendChild(addbutton);
        

        jQuery(addbutton).click(function(e){
            var val = adder.value;
            saveNewTag(val);
        });
        
        jQuery(place).attr("dirty","true");
        
    }
    
};
config.macros.niceTagger.init();
