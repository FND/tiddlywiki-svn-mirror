tags: systemConfig


/***
|''Name''|TiddlersPlugin|
|''Description''|provide ability to loop through filtered list of tiddlers|
|''Author''|Jon Robson|
|''Version''|0.7.1|
|''Description''|Brings looping to tiddlers|
!Usage
<<tiddlers Template filter:[tag[systemConfig]]>>
will pass all tiddlers that match the filter (ie. those tagged systemConfig) through the tiddler Template.
The tiddler Template is run in the context of the tiddler being passed through it - for instance <<view title>> will display the title of the tiddler rather than Template.
!Code
***/
/*{{{*/
config.macros.tiddlers = {
    handler: function(place,macroName,params,wikifier,paramString,tiddler){
        var args = paramString.parseParams("name",null,true,false,true);
        var tiddlers;
        var filter = args[0]["filter"];
        var ifEmpty = args[0]["ifEmpty"];
        var ifEmptyString =  args[0]["ifEmptyString"];
        if(!filter) tiddlers = store.getTiddlers();
        else tiddlers = store.filterTiddlers(filter);
        
        for(var i=0; i < tiddlers.length;i++){
            var tid = tiddlers[i];
            var newParamString = paramString+" data:\""+tid.title +"\"";
            //console.log("tiddlers",newParamString);
            this.tiddler(place,macroName,params,wikifier,newParamString,tid);
        }
        if(tiddlers.length ==0){
            if(ifEmpty){
                var newParamString = "\""+ifEmpty +"\" " +paramString;                
                this.tiddler(place,macroName,params,wikifier,newParamString,store.getTiddler(ifEmpty));
            }
            else if(ifEmptyString){
              wikify(ifEmptyString[0],place);
            }
        }
        
    }
}

/* a hacked version of the tiddler macro */
config.macros.tiddlers.tiddler = function(place,macroName,params,wikifier,paramString,tiddler)
{
  var namedprms = paramString.parseParams(null, null, true);
  var options ={};
  for(var i=0; i < namedprms.length;i++){
      var nameval = namedprms[i];
      options[nameval.name] = nameval.value;
  }
	params = paramString.parseParams("name",null,true,false,true);
	var names = params[0]["name"];
	var tiddlerName = names[0];
	var className = names[1] || null;
	var args = params[0]["with"];
	var wrapper = createTiddlyElement(place,"span",null,className);
	if(!args && !options.data) {
		wrapper.setAttribute("refresh","content");
		wrapper.setAttribute("tiddler",tiddlerName);
	}
	var text = store.getTiddlerText(tiddlerName);
	
	//if(text) {
		var stack = config.macros.tiddler.tiddlerStack;
		if(stack.indexOf(tiddlerName) !== -1)
			return;
		stack.push(tiddlerName);
		try {
			var n = args ? Math.min(args.length,9) : 0;
			for(var i=0; i<n; i++) {
				var placeholderRE = new RegExp("\\$" + (i + 1),"mg");
				text = text.replace(placeholderRE,args[i]);
			}
			if(options.data){
			  tiddlerName = options.data;
			}
			//console.log(tiddlerName,store.getTiddler(tiddlerName));
			config.macros.tiddler.renderText(wrapper,text,tiddlerName,params);
		} finally {
			stack.pop();
		}
	//}
};
/*}}}*/