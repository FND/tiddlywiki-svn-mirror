<div tiddler="PluginFormat" modifier="JeremyRuston" modified="200607301153" created="200607301128" tags="">It is recommended that [[Plugins]]  start with some standard information in TiddlerSlicing format. For example, see the ExamplePlugin:\n{{{\n|''Name:''|ExamplePlugin|\n|''Description:''|To demonstrate how to write TiddlyWiki plugins|\n|''Version:''|2.0.2|\n|''Date:''|Jul 12, 2006|\n|''Source:''|http://www.tiddlywiki.com/#ExamplePlugin|\n|''Author:''|JeremyRuston (jeremy (at) osmosoft (dot) com)|\n|''License:''|[[BSD open source license]]|\n|''~CoreVersion:''|2.1.0|\n|''Browser:''|Firefox 1.0.4+; Firefox 1.5; InternetExplorer 6.0|\n}}}\nAt the moment, only ~CoreVersion affects how [[Plugins]] are processed: if the ~CoreVersion is specified for a plugin, TiddlyWiki will only execute the plugin if the core code version matches or exceeds the version specified. For example, if you specify a ~CoreVersion of 2.2, version 2.1.x of TiddlyWiki will refuse to execute the plugin.\n\nTiddlyWiki executes [[Plugins]] by wrapping them in a function definition like this:\n{{{\nfunction(tiddler,pluginInfo)\n{\n[[Plugin code is spliced into place here]]\n}\n}}}\nThe available parameters are:\n|tiddler |A reference to the {{{TIddler()}}} object containing this plugin|\n|pluginInfo |A member of the {{{pluginError[]}}} global array containing the metadata about this plugin: Name, Description, Version, ~CoreVersion, Date, Source, Author, License, Browsers, title, log |\n{{{pluginInfo.log}}} is a string array that can have additional log strings pushed onto it.\n\nNote that [[Plugins]] can use the {{{return}}} statement to bail out early (the return value is ignored). To indicate an error, plugins should just {{{throw}}} an exception.</div>