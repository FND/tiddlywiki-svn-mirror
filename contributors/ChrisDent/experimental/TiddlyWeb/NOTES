
== ENTITIES ==

* Tiddler

  A tiddler, its content and metadata.

* Bag

  A list of tiddlers.

* Security Policy

  An attribute of a bag that describes access control for the
  bag and the tiddlers within.

* Filter

  A filter on a list of tiddlers. (e.g. only those with tag "foo")

* Recipe Line

  The combination of a bag and a filter.

* Recipe

  An ordered list of recipe lines.

* Workspace

  The tiddlywiki that results from running a recipe.

== URLS ==

GET, PUT, DELETE a tiddler:
    /bags/{bag name}/tiddlers/{tiddler name}

GET, PUT a bag (and its metadata but not its list of tiddlers):
    /bags/{bag name}

GET all the tiddlers in a bag:
    /bags/{bag name}/tiddlers[?filter query string]

GET a list of all visible bags:
    /bags[?filter query string]

GET a workspace, or PUT a workspace recipe, via name
    /workspaces/{workspace name}

GET a list of all visible workspaces
    /workspaces[?filter query string]

== STORAGE ==

Implementation of server side datastore still up in the air. 
Considering some combination of directory hierarchy with some
text and some YAML files (YAML is nicely readable and well 
supported in python and many other languages).

We've not yet had any serious discussion about revision handling.

It may be reasonable to store all this stuff as tiddlers, with
some tiddlers being lists of tiddlers.

== MISC ==

* Consider using rhino for at least some the testing to replicate
  a real TiddlyWiki, or instrument a realy TiddlyWiki.

* Use wsgi intercept in order to create fast tests.

* Use py.test <http://codespeak.net/py/dist/test.html> for easy
  testing.

* Critical that we test at multiple levels of the system.

* Make sense to duplicate filter language as query string on bag?
  I think so. Then a recipe is simply URLs.

* Syntax, semantics and mechanics of searching tiddlers still
  needs some work.

