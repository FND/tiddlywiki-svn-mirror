
It is possible to run TiddlyWeb on Google's AppEngine service, 
with some work.

*** Familiarity with AppEngine is required for any of this to 
*** make sense. This development was done using the OS X
*** GoogleAppEngineLauncher.

The basic requirements are to create a Store that uses the google
appengine data system and a challenger and extractor that use
google users. Once that is made it is just a matter of
gathering up the necessary required modules in an appengine 
directory and then deploying to the service.

The store, challenger and extractor are included in the directory
with this README: googledata.py, google_user_challenger.py,
google_user_extractor.py

For the sake of simplicity tiddlers revisions and user roles are
not supported. Neither are required for TiddlyWeb to operate (as
long as you don't request a revisions URL). Simple db.Model
classes that mirror Recipe, Tiddler and Bag are used for storage. 

main.py is the script which appengine uses to get things going.
Because TiddlyWeb is a pure WSGI application with no framework 
requirements, there's not a lot that happens here: we just provide
the WSGI app to a handler.

The AppEngine SDK should create app.yaml and index.yaml files
for you in a directory. The penultimate step is gathering the necessary
libraries and files into that directory. This can be done by symlink 
or copy. Don't forget the External requirements. Do not use eggs. 

Here's a list of external requirements:

* selector.py
* resolver.py
* simplejson
* BeautifulSoup.py
* html5lib
* wikklytext 
* ply
* boodebr

The tiddlywebconfig.py included with this code is commented to explain
what each entry does. Take note: it references the atom plugin for 
TiddlyWeb, which you can learn about at

  http://tiddlyweb.peermore.com/wiki/#atom

You will need to put some content in your TiddlyWeb to be able
to use it. There are a few different ways to do this. 

* You can PUT to create bags and recipes and you can POST an entire
  tiddlywiki to an existing bag.
** Look at the test code in the tiddlyweb distribution for examples
   on how to do these things.

* See tiddlywebweb, an experimental library for accessing
  a remote TiddlyWeb through another TiddlyWeb in 
  http://svn.tiddlywiki.org/Trunk/contributors/ChrisDent/experimental/tiddlywebweb/
  to create bags, recipes and tiddlers. This works rather (in
  fact extremely) well.

If you want to be able to sync or autosave you will need
the plugins which make up the TiddlyWebWiki vertical. See:
 
  http://tiddlyweb.peermore.com/wiki/#TiddlyWebWiki

Feel free to contact me with questions. Or post to the
TiddlyWikiDev google group.
-- 
Chris Dent
<cdent@peermore.com>
